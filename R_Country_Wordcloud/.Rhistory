"FI" %in% articles[670,"textCountry"][]
"FI" %in% articles[670,"textCountry"][1]
str(articles[670,"textCountry"])
"FI" %in% articles[670,"textCountry"][[1]]
articles[671,"textCountry"]
"FR" %in% articles[671,"textCountry"][[1]]
"FR" %in% articles[671,"textCountry"]
t = 0
for (i in 1:dim(articles)[1]){
for (c in countries){
t = t + 1
articles[i,paste0("S_",c)] = ifelse(c %in% articles[i,"textCountry"][[1]] == "TRUE" ||
c %in% articles[i,"textCountry2"][[1]] == "TRUE", 1, 0)
articles[i,paste0("A_",c)] = ifelse(c %in% articles[i,"textfirstauthor"][[1]] == "TRUE" ||
c %in% articles[i,"textauthor2"][[1]] == "TRUE", 1, 0)
articles[i,paste0("L_",c)] = ifelse(articles[i,paste0("S_",c)] == 1 && articles[i,paste0("A_",c)] == 1, 1, 0)
print(articles[i,paste0("S_",c)])
}}
t = 0
for (i in 1:dim(articles)[1]){
for (c in countries){
t = t + 1
articles[i,paste0("S_",c)] = ifelse(c %in% articles[i,"textCountry"][[1]] == "TRUE" ||
c %in% articles[i,"textCountry2"][[1]] == "TRUE", 1, 0)
articles[i,paste0("A_",c)] = ifelse(c %in% articles[i,"textfirstauthor"][[1]] == "TRUE" ||
c %in% articles[i,"textauthor2"][[1]] == "TRUE", 1, 0)
articles[i,paste0("L_",c)] = ifelse(articles[i,paste0("S_",c)] == 1 && articles[i,paste0("A_",c)] == 1, 1, 0)
print(t)
}}
#
locals = paste0("L_", countries)
authors = paste0("A_", countries)
studies = paste0("S_", countries)
for (i in 1:dim(articles)[1]){
articles[i,"locals"] = sum(articles[i,locals])
articles[i,"LocalStudy"] = ifelse(articles[i,"locals"] >= 1, 1, 0)
}
summary(articles)
sum(articles$LocalStudy)
colnames(articles)
articlesToSave = articles
articlesToSave$textCountry = NULL
articlesToSave$textCountry2 = NULL
articlesToSave$textfirstauthor = NULL
articlesToSave$textauthor2 = NULL
write.csv(articlesToSave, "/Users/clementinecottineau/Documents/cybergeo20/R_Country_Wordcloud/articles_Contingency.csv")
articles = read.csv("/Users/clementinecottineau/Documents/cybergeo20/R_Country_Wordcloud/articles_Contingency.csv", sep=",", dec=".")
# head(articles)
#
Studied = colSums(articles[,studies])
Authoring = colSums(articles[,authors])
SelfStudied = colSums(articles[,locals])
countryBase = data.frame(countries, Studied, Authoring, SelfStudied)
tail(countryBase, 10)
REG@data = data.frame(REG@data, countryBase[match(REG@data$CNTR_ID,countryBase$countries), ])
REG@data$StudiedAtAll = ifelse(REG@data$Studied >= 1, "#1C6F91", "lightgrey")
REG@data$AuthoringAtAll = ifelse(REG@data$Authoring >= 1, "orange", "lightgrey")
REG@data$SelfStudiedAtAll = ifelse(REG@data$SelfStudied >= 1,  "grey20", "lightgrey")
par(mfrow=c(1,1), mar = c(0,0,1,0))
plot(REG, col=REG@data$StudiedAtAll, border="white")
plot(REG, col=REG@data$AuthoringAtAll, border="white")
plot(REG, col=REG@data$SelfStudiedAtAll, border="white")
plot(REG, col=REG@data$StudiedAtAll, border="white")
Studied
countryBase
REG@data$StudiedAtAll = ifelse(REG@data$Studied >= 1, "#1C6F91", "lightgrey")
REG@data$AuthoringAtAll = ifelse(REG@data$Authoring >= 1, "orange", "lightgrey")
REG@data$SelfStudiedAtAll = ifelse(REG@data$SelfStudied >= 1,  "grey20", "lightgrey")
par(mfrow=c(1,1), mar = c(0,0,1,0))
plot(REG, col=REG@data$StudiedAtAll, border="white")
REG@data$CNTR_ID
REG@data$Studied
REG@data
REG@data[REG@data$countries.2 == "FI",]
world = readOGR(dsn=paste(path, "world/world.shp", sep=""),
layer = "world", encoding="utf8")
plot(world)
REG = world
REGP = gCentroid(REG,byid=TRUE, id = REG@data$CNTR_ID)
plot(REGP)
a.frame(REG@data, countryBase[match(REG@data$CNTR_ID,countryBase$countries), ])
REG@data$StudiedAtAll = ifelse(REG@data$Studied >= 1, "#1C6F91", "lightgrey")
REG@data = data.frame(REG@data, countryBase[match(REG@data$CNTR_ID,countryBase$countries), ])
REG@data$StudiedAtAll = ifelse(REG@data$Studied >= 1, "#1C6F91", "lightgrey")
REG@data$AuthoringAtAll = ifelse(REG@data$Authoring >= 1, "orange", "lightgrey")
REG@data$SelfStudiedAtAll = ifelse(REG@data$SelfStudied >= 1,  "grey20", "lightgrey")
par(mfrow=c(1,1), mar = c(0,0,1,0))
plot(REG, col=REG@data$StudiedAtAll, border="white")
plot(REG, col=REG@data$AuthoringAtAll, border="white")
plot(REG, col=REG@data$SelfStudiedAtAll, border="white")
Year = "1996-2015"
title(paste0("Countries studies in Cybergeo | ", Year))
title(paste0("Countries studies in Cybergeo | ", Year), col = "#1C6F91")
plot(REG, col=REG@data$StudiedAtAll, border="white")
title(paste0("Countries studies in Cybergeo | ", Year), col = "#1C6F91")
plot(REG, col=REG@data$StudiedAtAll, border="white")
title(paste0("Countries studied in Cybergeo articles | ", Year))
plot(REG, col=REG@data$AuthoringAtAll, border="white")
title(paste0("Countries authoring in Cybergeo articles | ", Year))
plot(REG, col=REG@data$AuthoringAtAll, border="white")
title(paste0("Countries authoring Cybergeo articles | ", Year))
plot(REG, col=REG@data$SelfStudiedAtAll, border="white")
title(paste0("Countries studied by locals in Cybergeo articles | ", Year))
cybterms5 = cybterms4[with(cybterms4, order(-count)),]
cybterms = read.csv("/Users/clementinecottineau/Documents/cybergeo20/Data/raw/terms.csv", sep=";", dec=".")
head(cybterms)
#cybtermat = table(cybterms$term, cybterms$id)
#tail(cybtermat)
lookup = data.frame(countries)
lookup$polyID = as.numeric(rownames(lookup)) - 1
cybterms$idterm = rownames(cybterms)
cybterms2 = data.frame(cybterms, articles[match(cybterms$id,articles$id), ])
cybterms3 = data.frame(cybterms2, lookup[match(cybterms2$firstauthor,lookup$countries), ])
cybterms4 = cybterms3[complete.cases(cybterms3$id.1),]
#summary(cybterms4, 20)
cybterms5 = cybterms4[with(cybterms4, order(-count)),]
keywordsPO = cybterms5[,]
#summary(keywordsPO)
LOC=NULL
ID = as.numeric(keywordsPO$idterm)
WORDS = keywordsPO$term
FREQ = as.numeric(keywordsPO$count)
CountryName = keywordsPO$countries
IDREG = as.numeric(keywordsPO$polyID)
LOC = data.frame(ID, WORDS, IDREG, FREQ, CountryName)
LOC$IDPOL = LOC$IDREG + 1
#LOC
LOC = subset(LOC, !is.na(IDPOL))
#LOC$RFREQ = LOC$FREQ / LOC$Total
isIDmax <- with(LOC, ave(FREQ, CountryName, FUN=function(x) seq_along(x)==which.max(x)))==1
LOC = LOC[isIDmax, ] # most common word by country
ids = unique(LOC$IDPOL)
x=data.frame()
y=data.frame()
z=data.frame()
for (i in ids) {
x[i,"X"] = REG@polygons[[i]]@labpt[[1]] # Barycentre
y[i,"Y"] = REG@polygons[[i]]@labpt[[2]]
z[i,"Total"] = sum(LOC[LOC$IDPOL == i,]$FREQ)
}
x$IDPOL = rownames(x)
y$IDPOL = rownames(y)
z$IDPOL = rownames(z)
x= x[complete.cases(x),]
y= y[complete.cases(y),]
z= z[complete.cases(z),]
LOC = merge(LOC, x, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC = merge(LOC, y, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC = merge(LOC, z, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC
x <- LOC[,"X"]
y <- LOC[,"Y"]
w <- LOC[,"WORDS"]
f = LOC[,"FREQ"]
par(mfrow=c(1,1), mar = c(0,0,1,0))
plot(REG, col="grey", border=F)
text(x,y,w, cex = 0.5 * f)
plot(REG, col="grey", border=F)
text(x,y,w, cex = 0.005 * f)
plot(REG, col="grey", border=F)
text(x,y,w, cex = 0.001 * f)
title(paste0("Frequency of the most frequent word | ", Year))
isIDmax <- with(LOC, ave(FREQ, CountryName, FUN=function(x) seq_along(x)==which.min(x)))==1
LOC = LOC[isIDmax, ] # most common word by country
ids = unique(LOC$IDPOL)
x=data.frame()
y=data.frame()
z=data.frame()
for (i in ids) {
x[i,"X"] = REG@polygons[[i]]@labpt[[1]] # Barycentre
y[i,"Y"] = REG@polygons[[i]]@labpt[[2]]
z[i,"Total"] = sum(LOC[LOC$IDPOL == i,]$FREQ)
}
x$IDPOL = rownames(x)
y$IDPOL = rownames(y)
z$IDPOL = rownames(z)
x= x[complete.cases(x),]
y= y[complete.cases(y),]
z= z[complete.cases(z),]
LOC = merge(LOC, x, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC = merge(LOC, y, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC = merge(LOC, z, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC
x <- LOC[,"X"]
y <- LOC[,"Y"]
w <- LOC[,"WORDS"]
f = LOC[,"FREQ"]
par(mfrow=c(1,1), mar = c(0,0,1,0))
plot(REG, col="grey", border=F)
text(x,y,w, cex = 0.001 * f)
title(paste0("The least frequent words | ", Year))
text(x,y,w, cex = 1 )
LOC
x <- LOC[,"X"]
isIDmin <- with(LOC, ave(FREQ, CountryName, FUN=function(x) seq_along(x)==which.min(x)))==1
LOC = LOC[isIDmin, ] # most common word by country
ids = unique(LOC$IDPOL)
x=data.frame()
y=data.frame()
z=data.frame()
for (i in ids) {
x[i,"X"] = REG@polygons[[i]]@labpt[[1]] # Barycentre
y[i,"Y"] = REG@polygons[[i]]@labpt[[2]]
z[i,"Total"] = sum(LOC[LOC$IDPOL == i,]$FREQ)
}
x$IDPOL = rownames(x)
y$IDPOL = rownames(y)
z$IDPOL = rownames(z)
x= x[complete.cases(x),]
y= y[complete.cases(y),]
z= z[complete.cases(z),]
LOC = merge(LOC, x, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC = merge(LOC, y, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC = merge(LOC, z, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC
x <- LOC[,"X"]
y <- LOC[,"Y"]
w <- LOC[,"WORDS"]
f = LOC[,"FREQ"]
par(mfrow=c(1,1), mar = c(0,0,1,0))
plot(REG, col="grey", border=F)
text(x,y,w, cex = 1)
title(paste0("The least frequent words | ", Year))
LOC=NULL
ID = as.numeric(keywordsPO$idterm)
WORDS = keywordsPO$term
FREQ = as.numeric(keywordsPO$count)
CountryName = keywordsPO$countries
IDREG = as.numeric(keywordsPO$polyID)
LOC = data.frame(ID, WORDS, IDREG, FREQ, CountryName)
LOC$IDPOL = LOC$IDREG + 1
#LOC
LOC = subset(LOC, !is.na(IDPOL))
isIDmin <- with(LOC, ave(FREQ, CountryName, FUN=function(x) seq_along(x)==which.min(x)))==1
LOC = LOC[isIDmin, ] # most common word by country
ids = unique(LOC$IDPOL)
x=data.frame()
y=data.frame()
z=data.frame()
for (i in ids) {
x[i,"X"] = REG@polygons[[i]]@labpt[[1]] # Barycentre
y[i,"Y"] = REG@polygons[[i]]@labpt[[2]]
z[i,"Total"] = sum(LOC[LOC$IDPOL == i,]$FREQ)
}
x$IDPOL = rownames(x)
y$IDPOL = rownames(y)
z$IDPOL = rownames(z)
x= x[complete.cases(x),]
y= y[complete.cases(y),]
z= z[complete.cases(z),]
LOC = merge(LOC, x, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC = merge(LOC, y, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC = merge(LOC, z, by.x = "IDPOL", by.y="IDPOL", all.y=F)
LOC
x <- LOC[,"X"]
y <- LOC[,"Y"]
w <- LOC[,"WORDS"]
f = LOC[,"FREQ"]
par(mfrow=c(1,1), mar = c(0,0,1,0))
plot(REG, col="grey", border=F)
text(x,y,w, cex = 1)
title(paste0("The least frequent words | ", Year))
plot(REG, col="grey", border=F)
text(x,y,w, cex = 0.5)
plot(REG, col="grey", border=F)
text(x,y,w, cex = 0.8)
title(paste0("The least frequent words | ", Year))
plot(REG, col="grey", border=F)
text(x,y,w, cex = 0.7)
title(paste0("The least frequent words | ", Year))
plot(REG, col="grey", border=F)
text(x,y,w, cex = 0.6)
title(paste0("The least frequent words | ", Year))
Years = 1996:2015
Years
head(articles)
substr(articles$date.1, 1, 4)
1995 %in% substr(articles$date.1, 1, 4)
Year = 1998
articles[as.numeric(substr(articles$date.1)) == Year ,]
Year
articles[substr(articles$date.1) == as.character(Year),]
as.character(Year)
substr(articles$date.1)
articles[substr(articles$date.1, 1, 4) == as.character(Year),]
#nettoyage des dev
while( length(dev.list())!=0){
dev.off()
}
article_maps = function(year, articles) {
REG = world
articles_y = articles[substr(articles$date.1, 1, 4) == as.character(Year),]
Studied = colSums(articles[,studies])
Authoring = colSums(articles[,authors])
SelfStudied = colSums(articles[,locals])
countryBase = data.frame(countries, Studied, Authoring, SelfStudied)
REG@data = data.frame(REG@data, countryBase[match(REG@data$CNTR_ID,countryBase$countries), ])
REG@data$StudiedAtAll = ifelse(REG@data$Studied >= 1, "#1C6F91", "lightgrey")
REG@data$AuthoringAtAll = ifelse(REG@data$Authoring >= 1, "orange", "lightgrey")
REG@data$SelfStudiedAtAll = ifelse(REG@data$SelfStudied >= 1,  "grey20", "lightgrey")
return(REG)
}
map_studied = function(shp, year) {
REG = shp
plot(REG, col=REG@data$StudiedAtAll, border="white")
title(paste0("Countries studied in Cybergeo articles | ", year))
# plot(REG, col=REG@data$AuthoringAtAll, border="white")
#  title(paste0("Countries authoring Cybergeo articles | ", Year))
# plot(REG, col=REG@data$SelfStudiedAtAll, border="white")
#  title(paste0("Countries studied by locals in Cybergeo articles | ", Year))
}
make_studied_gif <- function (years, articles) {
library(animation)
ani.options(interval=.2)
saveGIF({
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(0,0,1,0) + 0.1)
for (j in Years) {
par(fg=1)
shp = studied_table(Year, articles)
map_studied(shp)
}
}
,movie.name="studied.gif", ani.height=400, ani.width=800
) #SaveGIF
}
make_studied_gif(Years, articles)
make_studied_gif <- function (years, articles) {
library(animation)
ani.options(interval=.2)
saveGIF({
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(0,0,1,0) + 0.1)
for (j in Years) {
par(fg=1)
shp = article_maps(Year, articles)
map_studied(shp)
}
}
,movie.name="studied.gif", ani.height=400, ani.width=800
) #SaveGIF
}
make_studied_gif(Years, articles)
make_studied_gif <- function (years, articles) {
library(animation)
ani.options(interval=.2)
saveGIF({
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(0,0,1,0) + 0.1)
for (j in Years) {
par(fg=1)
shp = article_maps(Year, articles)
map_studied(shp, Year)
}
}
,movie.name="studied.gif", ani.height=400, ani.width=800
) #SaveGIF
}
make_studied_gif(Years, articles)
sessionInfo()
install.packages("installr")
install.ImageMagick()
make_studied_gif(Years, articles)
install.packages("ImageMagick")
while( length(dev.list())!=0){
dev.off()
}
###################################
#Init
###################################
#nettoyage des dev
while( length(dev.list())!=0){
dev.off()
}
library(ggplot2)
# pareto-folder
folder_path <- "/Users/clementinecottineau/Documents/Géographie/marius/bonuxpop/"
interval_generation <- 1000
starting_generation <- 1000
last_generation <- 27000
current_generation <- 10000
nb_generation <- (last_generation - starting_generation) / interval_generation
current_file <- read.csv(paste(folder_path, "population", current_generation, ".csv", sep=""), dec=".", sep=",")
# function to generation pareto front plot
generation_plot <- function (current_generation) {
current_file <- read.csv(paste(folder_path, "population", current_generation, ".csv", sep=""), dec=".", sep=",")
current_plot <- ggplot(current_file, aes(x = overflow, y = distribution)) +
geom_point(aes(col = islandGeneration )) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1))
}
#pour les faire a la main
current_generation <- 44000
current_plot <- generation_plot(current_generation)
current_plot
dev.copy(png,filename= paste(folder_path, "pareto-gen", current_generation, ".png", sep=""));
dev.off ()
# gif function
make_pareto_gif <- function (nb_generation) {
library(animation)
#Set delay between frames when replaying
ani.options(interval=.2)
#couleurs pour le changement progressif
mypalette <- rainbow(31)
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
#  boucle affichage des images qui font l'anim, itère sur les colonnes de dpop quyi correspondent aux pop 59 -> 89
for (j in starting_generation:nb_generation) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
# Dress it up a little just for fun
current_generation <- j
generation_plot(current_file)
}
}
,movie.name="pareto.gif", ani.height=600, ani.width=600
) #SaveGIF
}#fonction make_pop_wealth_gif
make_pareto_gif(nb_generation)
make_pareto_gif <- function (nb_generation) {
library(animation)
#Set delay between frames when replaying
ani.options(interval=.2)
#couleurs pour le changement progressif
mypalette <- rainbow(31)
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
#  boucle affichage des images qui font l'anim, itère sur les colonnes de dpop quyi correspondent aux pop 59 -> 89
for (j in starting_generation:nb_generation) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
# Dress it up a little just for fun
current_generation <- j
generation_plot(current_file)
}
}
,movie.name="pareto.gif", ani.height=600, ani.width=600
) #SaveGIF
}#fonction make_pop_wealth_gif
make_pareto_gif(nb_generation)
folder_path <- "/Users/clementinecottineau/Documents/Géographie/marius/bonuxpop/"
interval_generation <- 1000
starting_generation <- 1000
last_generation <- 27000
current_generation <- 10000
nb_generation <- (last_generation - starting_generation) / interval_generation
current_file <- read.csv(paste(folder_path, "population", current_generation, ".csv", sep=""), dec=".", sep=",")
current_file <- read.csv(paste(folder_path, "population", current_generation, ".csv", sep=""), dec=".", sep=",")
current_file <- read.csv(paste(folder_path, "population", current_generation, ".csv", sep=""), dec=".", sep=",")
# function to generation pareto front plot
generation_plot <- function (current_generation) {
current_file <- read.csv(paste(folder_path, "population", current_generation, ".csv", sep=""), dec=".", sep=",")
current_plot <- ggplot(current_file, aes(x = overflow, y = distribution)) +
geom_point(aes(col = islandGeneration )) +
coord_cartesian(xlim = c(0,1), ylim = c(0,1))
}
#pour les faire a la main
current_generation <- 44000
current_plot <- generation_plot(current_generation)
current_plot
dev.copy(png,filename= paste(folder_path, "pareto-gen", current_generation, ".png", sep=""));
dev.off ()
# gif function
make_pareto_gif <- function (nb_generation) {
library(animation)
#Set delay between frames when replaying
ani.options(interval=.2)
#couleurs pour le changement progressif
mypalette <- rainbow(31)
# Begin animation loop
# Note the brackets within the parentheses
saveGIF({
layout(matrix(c(1, rep(2, 5)), 6, 1))
# Adjust the margins a little
par(mar=c(4,4,2,1) + 0.1)
#  boucle affichage des images qui font l'anim, itère sur les colonnes de dpop quyi correspondent aux pop 59 -> 89
for (j in starting_generation:nb_generation) {
# Reset the color of the top chart every time (so that it doesn’t change as the
# bottom chart changes)
par(fg=1)
# Set up the top chart that keeps track of the current frame/iteration
# Dress it up a little just for fun
current_generation <- j
generation_plot(current_file)
}
}
,movie.name="pareto.gif", ani.height=600, ani.width=600
) #SaveGIF
}#fonction make_pop_wealth_gif
make_pareto_gif(nb_generation)
make_studied_gif(Years, articles)
Year = 2006
shp = article_maps(Year, articles)
map_studied(shp, Year)
REG = shp
plot(REG, col=REG@data$StudiedAtAll, border="white")
title(paste0("Countries studied in Cybergeo articles | ", year))
plot(REG, col=REG@data$StudiedAtAll, border="white")
