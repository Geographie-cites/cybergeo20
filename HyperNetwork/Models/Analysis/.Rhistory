neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico==neigh[n]))
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigin=c()
cybsecorigout=c()
cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="in")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico)==neigh[n])
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigin=append(cybsecorigin,1-sum(probas^2))}
}
cybsecorigout=c()
#cybsecorigall=c()
for(i in 1:length(cybnodes)){
show(i)
neigh = neighbors(gcitation,v=cybnodes[i],mode="out")$name
show(neigh)
probas = rep(0,ncol(them_probas));count=0
for(n in 1:length(neigh)){
inds = which(names(keyword_dico)==neigh[n])
if(length(inds)>0){probas=probas+them_probas[inds[1],];count=count+1}
}
if(count>0){probas=probas/count}
if(sum(probas)>0){cybsecorigout=append(cybsecorigout,1-sum(probas^2))}
}
dat = data.frame(orig=c(cybsecorigin,cybsecorigout),type=c(rep("in",length(cybsecorigin),rep("out",length(cybsecorigout)))
)
)
c(cybsecorigin,cybsecorigout)
dat = data.frame(orig=c(cybsecorigin,cybsecorigout),type=c(rep("in",length(cybsecorigin)),rep("out",length(cybsecorigout)))
)
dat
g=ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)
sdat=as.tbl(dat)%>%group_by(type)%>%summarise(mean=mean(orig))
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=cyb),linetype="dashed", size=1)
ggplot(dat, aes(x=orig, fill=type)) + geom_density(alpha=.3)+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
is.numeric("12")
as.numeric("12")
as.numeric("12mph")
is.numeric(as.numeric("12mph"))
gsub(x = "30 mph"," ","")
s=gsub(x = "30 mph"," ","")
s=gsub(x = s," ","")
s
sr=gsub(x = s," ","")
normalizedSpeed <- function(s){
if(!is.na(as.numeric(s))){return(as.numeric(s))}
sr=gsub(x = s," ","")
if(grepl("mph",sr)){return(as.numeric(gsub(x = sr,"mph",""))*1.609)}
else{return(NA)}
}
normalizedSpeed("30 mph")
normalizedSpeed("30mph")
normalizedSpeed("30")
normalizedSpeed(30)
raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/density_wgs84.tif"))
library(raster)
raw <- raster(paste0(Sys.getenv("CN_HOME"),"/Data/PopulationDensity/raw/density_wgs84.tif"))
raw
xyFromCell()
xyFromCell
xyFromCell(raw,1230)
library(RPostgreSQL)
library(rgeos)
con = dbConnect(dbDriver("PostgreSQL"), dbname="osm_simpl",user="Juste",host="localhost" )
query = dbSendQuery(con,"SELECT ST_AsText(geography) AS geom FROM links;")
data = fetch(query,n=-1)
geoms = data$geom
roads=list()
for(i in 1:length(geoms)){
r=readWKT(geoms[i])@lines[[1]];r@ID=as.character(i)
roads[[i]]=r
}
splines = SpatialLines(LinesList = roads)
plot(splines)
library(igraph)
help("difference")
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
for(j in 1:ncol(real)){real[,j]=(real[,j]-min(real[,j]))/(max(real[,j])-min(real[,j]))}
library(RColorBrewer)
library(ggplot2)
library(MASS)
source(paste0(Sys.getenv('CN_HOME'),'/Models/Utils/R/plots.R'))
real_raw = read.csv(
paste0(Sys.getenv("CN_HOME"),'/Results/Morphology/Density/Numeric/20150806_europe50km_10kmoffset_100x100grid.csv'),
sep=";"
)
real =real_raw[!is.na(real_raw[,3])&!is.na(real_raw[,4])&!is.na(real_raw[,5])&!is.na(real_raw[,6])&!is.na(real_raw[,7])&!is.na(real_raw[,8])&!is.na(real_raw[,9]),]
real_ind = real[5*(0:(nrow(real)/5))+1,]
names(real)
indic="moran"
p = ggplot(data.frame(x=real$y,y=1-real$x,density_max=real[[indic]]),aes(x=x,y=y,colour=density_max))
p+geom_point()+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
indic="distance"
p = ggplot(data.frame(x=real$y,y=1-real$x,density_max=real[[indic]]),aes(x=x,y=y,colour=density_max))
p+geom_point()+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
map<-function(indic){
d=data.frame(x=real$y,y=1-real$x);d[[indic]]=real[[indic]]
p=ggplot(d,aes_string(x="x",y="y",colour=indic))
p+geom_point(shape=".",size=2)+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
}
# multiplots
indics=c("moran","distance","entropy","slope")
plots=list();k=1
for(indic in indics){
plots[[k]]=map(indic)
k=k+1
}
multiplot(plotlist=plots,cols=2)
map<-function(indic){
d=data.frame(x=real$y,y=1-real$x);d[[indic]]=real[[indic]]
p=ggplot(d,aes_string(x="x",y="y",colour=indic))
p+geom_point(shape=".",size=1)+xlab("")+ylab("")+labs(title=indic)+scale_colour_gradientn(colours=rev(rainbow(5)))+scale_y_continuous(breaks=NULL)+scale_x_continuous(breaks=NULL)
}
# multiplots
indics=c("moran","distance","entropy","slope")
plots=list();k=1
for(indic in indics){
plots[[k]]=map(indic)
k=k+1
}
multiplot(plotlist=plots,cols=2)
names(real)
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/clust$betweenss)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
for(k in 2:15){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
ccoef=append(ccoef,clust$tot.withinss/(clust$betweenss+clust$tot.withinss))# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k),xlab="",ylab="",xaxt='n',yaxt='n')
}
ccoef
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 2:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
vars = c(3,4,5,6)
ccoef=c()
par(mfrow=c(3,3))
for(k in 3:11){
show(k)
clust = kmeans(real[,vars],k,iter.max=30)
#ccoef=append(ccoef,sum(clust$withinss/clust$size)/k)# mean cluster size
withinProp=clust$tot.withinss/(clust$betweenss+clust$tot.withinss)
ccoef=append(ccoef,withinProp)# clust coef
plot(real$y,1-real$x,col=clust$cluster,pch='.',cex=3,main=paste0('k=',k,' ; withinProp=',withinProp),xlab="",ylab="",xaxt='n',yaxt='n')
}
shiny::runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/Cybergeo20')
help("forceNetwork")
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Models/Analysis'))
source('networkConstruction.R')
# export thematics for Clem mappping
#list.files("probas")
#list.files("export/comunitiesnames")
db='relevant_full_50000_eth50_nonfiltdico'
dbparams = 'relevant_full_50000_eth50_nonfiltdico_kmin0_kmax1200_freqmin50_freqmax10000_eth100'
load(paste0('probas/',dbparams,'.RData'))
load(paste0('processed/',db,'.RData'))
keyword_dico=res$keyword_dico;g=res$g;rm(res);gc()
them_probas = probas
# define comunities names
# com
thematics = communities(sub$com)
#thematics[[1]]
# define names by hand
themnames = as.character(read.csv(file=paste0('export/comunitiesnames/',dbparams,'.csv'),header=FALSE,stringsAsFactors = FALSE)[,1])
names(thematics)<-themnames
# select existing thematics
export_probas = them_probas[,!is.na(names(thematics))]
colnames(export_probas) = names(thematics)[!is.na(names(thematics))]
themnames=colnames(export_probas)[2:ncol(export_probas)]
# construct kws df
ckws=c();cth=c()
for(i in 1:length(thematics)){
if(!is.na(names(thematics)[i])){
for(kw in thematics[[i]]){
show(c(kw,names(thematics)[i]))
ckws=append(ckws,kw)
cth=append(cth,names(thematics)[i])
}
}
}
kwdf = data.frame(ckws,cth)
kwthemdico = cth;names(kwthemdico)=ckws
citationdbkws = dbConnect(SQLite(),"data/CitationKeywords.sqlite3")
redkws = sapply(keyword_dico,function(l){
Reduce(function(s1,s2){paste0(s1,";",s2)},l[l%in%ckws])
})
head(redksw)
head(redkws)
head(unlist(redkws))
strsplit("ongo;monitor;rock;decreas;last;decad;caus;rapid;field data;databas;large-scal;extern;valid;robust;shift;topographi;grain;breed;mountain;top;true;steep;small-scal;suitabl;grain",";")
strsplit("ongo;monitor;rock;decreas;last;decad;caus;rapid;field data;databas;large-scal;extern;valid;robust;shift;topographi;grain;breed;mountain;top;true;steep;small-scal;suitabl;grain",";")[[1]]
strsplit("ongo;monitor;rock;decreas;last;decad;caus;rapid;field data;databas;large-scal;extern;valid;robust;shift;topographi;grain;breed;mountain;top;true;steep;small-scal;suitabl;grain",";")[[1]]%in%ckws
keywords=data.frame(id=names(keyword_dico),keywords=unlist(redkws))
redkws = sapply(keyword_dico,function(l){
s=Reduce(function(s1,s2){paste0(s1,";",s2)},l[l%in%ckws])
if(is.null(s)){return("")}else{return(s)}
})
keywords=data.frame(id=names(keyword_dico),keywords=unlist(redkws))
dbWriteTable(citationdbkws,"keywords",keywords)
citationdbkws = dbConnect(SQLite(),"data/CitationKeywords.sqlite3")
library(RSQLite)
getwd()
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Cybergeo20'))
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/CybergeoNetworks'))
citationdbkws = dbConnect(SQLite(),"data/CitationKeywords.sqlite3")
dbWriteTable(citationdbkws,"keywords",keywords)
kwthemdico
citationkwthemdico=kwthemdico
save(citationkwthemdico,file=paste0(datadir,'citation_kwthemdico.RData'))
datadir=paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/CybergeoNetworks/data/')
save(citationkwthemdico,file=paste0(datadir,'citation_kwthemdico.RData'))
citationLoadKeywords<-function(id){
# load edges
toids=dbGetQuery(citationdbcit,paste0("SELECT to FROM edges WHERE `from`='",id,"';"))[,1]
fromids=dbGetQuery(citationdbcit,paste0("SELECT from FROM edges WHERE `to`='",id,"';"))[,1]
ids=c(id,toids,fromids)
req = "SELECT * FROM keywords WHERE "
for(i in ids[1:(length(ids)-1)]){req=paste0(req,"`id`='",i,"' OR ")}
req=paste0(req,"`id`='",ids[length(ids)],"';")
res=dbGetQuery(citationdbkws,req)
l = sapply(res[,2],function(s){strsplit(s,";")})
names(l)<-res[,1]
return(l)
}
citationLoadKeywords("16612201304630735484")
citationdbcit = dbConnect(SQLite(),"data/CitationNetwork.sqlite3")
citationdbkws = dbConnect(SQLite(),"data/CitationKeywords.sqlite3")
citationLoadKeywords("16612201304630735484")
citationLoadKeywords<-function(id){
# load edges
toids=dbGetQuery(citationdbcit,paste0("SELECT `to` FROM edges WHERE `from`='",id,"';"))[,1]
fromids=dbGetQuery(citationdbcit,paste0("SELECT `from` FROM edges WHERE `to`='",id,"';"))[,1]
ids=c(id,toids,fromids)
req = "SELECT * FROM keywords WHERE "
for(i in ids[1:(length(ids)-1)]){req=paste0(req,"`id`='",i,"' OR ")}
req=paste0(req,"`id`='",ids[length(ids)],"';")
res=dbGetQuery(citationdbkws,req)
l = sapply(res[,2],function(s){strsplit(s,";")})
names(l)<-res[,1]
return(l)
}
citationLoadKeywords("16612201304630735484")
id="16612201304630735484"
toids=dbGetQuery(citationdbcit,paste0("SELECT `to` FROM edges WHERE `from`='",id,"';"))[,1]
fromids=dbGetQuery(citationdbcit,paste0("SELECT `from` FROM edges WHERE `to`='",id,"';"))[,1]
ids=c(id,toids,fromids)
req = "SELECT * FROM keywords WHERE "
for(i in ids[1:(length(ids)-1)]){req=paste0(req,"`id`='",i,"' OR ")}
req=paste0(req,"`id`='",ids[length(ids)],"';")
req
res=dbGetQuery(citationdbkws,req)
res
l = sapply(res$keywords,function(s){strsplit(s,";")})
names(l)<-res$id
l
l[["2281355390010472193"]]
citationLoadKeywords<-function(id){
# load edges
toids=dbGetQuery(citationdbcit,paste0("SELECT `to` FROM edges WHERE `from`='",id,"';"))[,1]
fromids=dbGetQuery(citationdbcit,paste0("SELECT `from` FROM edges WHERE `to`='",id,"';"))[,1]
ids=c(id,toids,fromids)
req = "SELECT * FROM keywords WHERE "
for(i in ids[1:(length(ids)-1)]){req=paste0(req,"`id`='",i,"' OR ")}
req=paste0(req,"`id`='",ids[length(ids)],"';")
res=dbGetQuery(citationdbkws,req)
l = sapply(res$keywords,function(s){strsplit(s,";")})
names(l)<-res$id
return(l)
}
citationLoadKeywords("16612201304630735484")
citation_cybergeodata
load('data/citation_cybergeodata.RData')
citation_cybergeodata
names(citation_cybergeodata)
l
unlist(l)
load('citation_kwthemdico.RData')
load('data/citation_kwthemdico.RData')
citationkwthemdico
rgb(204,0,255,maxColorValue=255)
semanticcolors = c(rgb(204,0,255,maxColorValue=255),rgb(255,102,0,maxColorValue=255), rgb(255,102,0,maxColorValue=255),rgb(255,153,0,maxColorValue=255),rgb(0,204,102,maxColorValue=255),rgb(255,0,0,maxColorValue=255),rgb(153,153,0,maxColorValue=255),rgb(102,204,0,maxColorValue=255),
rgb(0,255,255,maxColorValue=255),rgb(255,255,0,maxColorValue=255),rgb(51,102,255,maxColorValue=255),rgb(51,255,51,maxColorValue=255),rgb(0,102,0,maxColorValue=255),
rgb(0,0,255,maxColorValue=255),rgb(102,51,0,maxColorValue=255)
)
# damn it Carl, you could have load his shit ! ^^
names(semanticcolors)<-c("complex systems","health","crime","statistical methods","remote sensing","political sciences/critical geography",
"traffic modeling","microbiology","cognitive sciences","spatial analysis","GIS","biogeography","environnemnt/climate",
"economic geography","physical geography")
semanticcolors[citationkwthemdico]
library(wordcloud)
wordcloud(c("TOS,"BITTE,"SYGICOP"),freq = c(5,10,3))
wordcloud(words = c("TOS,"BITTE,"SYGICOP"),freq = c(5,10,3))
wordcloud(words = c("TOS,"BITTE"","SYGICOP"),freq = c(5,10,3))
wordcloud(words = c("TOS,"BITTE","SYGICOP"),freq = c(5,10,3))
wordcloud(words = c("TOS","BITTE","SYGICOP"),freq = c(5,10,3))
par(mfrow=c(1,2))
wordcloud(words = c("TOS","BITTE","SYGICOP"),freq = c(5,10,3))
wordcloud(words = c("TOS","BITTE","SYGICOP"),freq = c(5,10,3))
sub$gg
V(sub$gg)["riparian"]
V(sub$gg)["riparian"]$docfreq
ckws=c();cth=c();cdocfreq=c()
for(i in 1:length(thematics)){
if(!is.na(names(thematics)[i])){
for(kw in thematics[[i]]){
show(c(kw,names(thematics)[i]))
ckws=append(ckws,kw)
cth=append(cth,names(thematics)[i])
cdocfreq=append(cdocfreq,V(sub$gg)[kw]$docfreq)
}
}
}
kwfreqs = cdocfreq;names(cdocfreq)=ckws
citationkwfreqs=kwfreqs
save(citationkwthemdico,citationkwfreqs,file=paste0(datadir,'citation_kwthemdico.RData'))
head(citationkwfreqs)
head(names(citationkwfreqs))
kwfreqs = cdocfreq;names(kwfreqs)=ckws
citationkwfreqs=kwfreqs
save(citationkwthemdico,citationkwfreqs,file=paste0(datadir,'citation_kwthemdico.RData'))
head(names(citationkwfreqs))
shiny::runApp()
runApp()
l
citationLoadKeywords<-function(id){
# load edges
toids=dbGetQuery(citationdbcit,paste0("SELECT `to` FROM edges WHERE `from`='",id,"';"))[,1]
fromids=dbGetQuery(citationdbcit,paste0("SELECT `from` FROM edges WHERE `to`='",id,"';"))[,1]
ids=c(id,toids,fromids)
req = "SELECT * FROM keywords WHERE "
for(i in ids[1:(length(ids)-1)]){req=paste0(req,"`id`='",i,"' OR ")}
req=paste0(req,"`id`='",ids[length(ids)],"';")
res=dbGetQuery(citationdbkws,req)
l = sapply(res$keywords,function(s){strsplit(s,";")})
names(l)<-res$id
return(l)
}
l=citationLoadKeywords("16612201304630735484")
keywords=l
id="16612201304630735484"
keywords[[id]]
semanticcolors = c(rgb(204,0,255,maxColorValue=255),rgb(255,102,0,maxColorValue=255), rgb(255,102,0,maxColorValue=255),rgb(255,153,0,maxColorValue=255),rgb(0,204,102,maxColorValue=255),rgb(255,0,0,maxColorValue=255),rgb(153,153,0,maxColorValue=255),rgb(102,204,0,maxColorValue=255),
rgb(0,255,255,maxColorValue=255),rgb(255,255,0,maxColorValue=255),rgb(51,102,255,maxColorValue=255),rgb(51,255,51,maxColorValue=255),rgb(0,102,0,maxColorValue=255),
rgb(0,0,255,maxColorValue=255),rgb(102,51,0,maxColorValue=255)
)
# damn it Carl, you could have load his shit ! ^^
names(semanticcolors)<-c("complex systems","health","crime","statistical methods","remote sensing","political sciences/critical geography",
"traffic modeling","microbiology","cognitive sciences","spatial analysis","GIS","biogeography","environnemnt/climate",
"economic geography","physical geography")
wordcloud(words=keywords[[id]],
freq=citationkwfreqs[keywords[[id]]],
colors=semanticcolors[citationkwthemdico[keywords[[id]]]]
)
allkws=unlist(keywords)
wordcloud(words=allkws,
freq=citationkwfreqs[allkws],
colors=semanticcolors[citationkwthemdico[allkws]]
)
runApp()
runApp()
which(citation_cybergeodata$linknum>0)
citation_cybergeodata$linknum>0
citation_cybergeodata$linknum
gcitation
load(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Data/nw/citationNetwork.RData'))
linknum=c()
for(ref in citation_cybergeodata$SCHID){
show(ref)
#show(length(neighbors(gcitation,V(gcitation)[ref],mode="all")))
lnum=0
if(ref %in% V(gcitation)$name){lnum=length(neighbors(gcitation,V(gcitation)[ref],mode="all"))}
linknum=append(linknum,lnum)
}
citation_cybergeodata$linknum
citation_cybergeodata$kwcount
citation_cybergeodata$linknum = linknum
citation_cybergeodata$kwcount
citation_cybergeodata$linknum
save(citation_cybergeodata,file=paste0(datadir,'citation_cybergeodata.RData'))
datadir=paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/CybergeoNetworks/data/')
save(citation_cybergeodata,file=paste0(datadir,'citation_cybergeodata.RData'))
runApp()
cth
# construct kws df
ckws=c();cth=c();cdocfreq=c()
for(i in 1:length(thematics)){
if(!is.na(names(thematics)[i])){
for(kw in thematics[[i]]){
show(c(kw,names(thematics)[i]))
ckws=append(ckws,kw)
cth=append(cth,names(thematics)[i])
cdocfreq=append(cdocfreq,V(sub$gg)[kw]$docfreq)
}
}
}
kwdf = data.frame(ckws,cth)
kwthemdico = cth;names(kwthemdico)=ckws
kwfreqs = cdocfreq;names(kwfreqs)=ckws
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Models/Analysis'))
source('networkConstruction.R')
# export thematics for Clem mappping
#list.files("probas")
#list.files("export/comunitiesnames")
db='relevant_full_50000_eth50_nonfiltdico'
dbparams = 'relevant_full_50000_eth50_nonfiltdico_kmin0_kmax1200_freqmin50_freqmax10000_eth100'
load(paste0('probas/',dbparams,'.RData'))
load(paste0('processed/',db,'.RData'))
keyword_dico=res$keyword_dico;g=res$g;rm(res);gc()
them_probas = probas
# define comunities names
# com
thematics = communities(sub$com)
#thematics[[1]]
# define names by hand
themnames = as.character(read.csv(file=paste0('export/comunitiesnames/',dbparams,'.csv'),header=FALSE,stringsAsFactors = FALSE)[,1])
names(thematics)<-themnames
# select existing thematics
export_probas = them_probas[,!is.na(names(thematics))]
colnames(export_probas) = names(thematics)[!is.na(names(thematics))]
themnames=colnames(export_probas)[2:ncol(export_probas)]
# construct kws df
ckws=c();cth=c();cdocfreq=c()
for(i in 1:length(thematics)){
if(!is.na(names(thematics)[i])){
for(kw in thematics[[i]]){
show(c(kw,names(thematics)[i]))
ckws=append(ckws,kw)
cth=append(cth,names(thematics)[i])
cdocfreq=append(cdocfreq,V(sub$gg)[kw]$docfreq)
}
}
}
kwdf = data.frame(ckws,cth)
kwthemdico = cth;names(kwthemdico)=ckws
kwfreqs = cdocfreq;names(kwfreqs)=ckws
kwthemdico["segreg"]
semanticcolors[kwthemdico["segreg"]]
rgb(0,102,0,maxColorValue=255)
rgb(0,0,255,maxColorValue=255)
semanticcolors[citationkwthemdico["segreg"]]
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
semanticcolors = list(rgb(204,0,255,maxColorValue=255),rgb(255,102,0,maxColorValue=255), rgb(255,102,0,maxColorValue=255),
rgb(255,153,0,maxColorValue=255),rgb(0,204,102,maxColorValue=255),rgb(255,0,0,maxColorValue=255),
rgb(153,153,0,maxColorValue=255),rgb(102,204,0,maxColorValue=255),rgb(0,255,255,maxColorValue=255),
rgb(255,255,0,maxColorValue=255),rgb(51,102,255,maxColorValue=255),rgb(51,255,51,maxColorValue=255),
rgb(0,102,0,maxColorValue=255),rgb(0,0,255,maxColorValue=255),rgb(102,51,0,maxColorValue=255)
)
# damn it Carl, you could have load his shit ! ^^
names(semanticcolors)<-c("complex systems","health","crime",
"statistical methods","remote sensing","political sciences/critical geography",
"traffic modeling","microbiology","cognitive sciences",
"spatial analysis","GIS","biogeography",
"environnemnt/climate","economic geography","physical geography")
semanticcolors
keywords[[id]]
semanticcolors[citationkwthemdico[keywords[[id]]]]
citationkwthemdico[keywords[[id]]
]
semanticcolors[citationkwthemdico[keywords[[id]]]]
citationkwthemdico[keywords[[id]]]
names(semanticcolors)<-c("complex systems","health","crime",
"statistical methods","remote sensing","political sciences/critical geography",
"traffic modeling","microbiology","cognitive sciences",
"spatial analysis","GIS","biogeography",
"environnment/climate","economic geography","physical geography")
semanticcolors[citationkwthemdico[keywords[[id]]]]
unlist(semanticcolors[citationkwthemdico[keywords[[id]]]])
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
shiny::runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
runApp('~/Documents/ComplexSystems/CyberGeo/cybergeo20/CybergeoNetworks')
help("wordcloud")
