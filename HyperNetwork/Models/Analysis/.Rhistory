# localcorrs=c();localdists=c();localcorrsinf=c();localcorrssup=c();
# for(i in 1:(Ncities-1)){show(i);for(j in (i+1):Ncities){
#   r = cor.test(as.numeric(delta_x[i,]),as.numeric(delta_x[j,]),method="pearson")
#   rho[i,j]=r$estimate;rho[j,i]=r$estimate
#   localcorrs = append(localcorrs,r$estimate);localdists=append(localdists,distances[i,j])
#   localcorrsinf = append(localcorrsinf,r$conf.int[1]);localcorrssup = append(localcorrssup,r$conf.int[2]);
# }}
# diag(rho)<-1
#
# corrs = append(corrs,localcorrs);dists=append(dists,localdists)
# corrsinf=append(corrsinf,localcorrsinf);corrssup=append(corrssup,localcorrssup)
#years=append(years,rep(dates[current_dates[length(current_dates)]],Ncities*(Ncities-1)/2))
years=append(years,rep(dates[current_dates[length(current_dates)]],length(x[x!=0])))
}
ggplot(data.frame(returns=returns,year=years), aes(x=returns, fill=as.factor(year))) + geom_density(alpha=.3)#+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
ggplot(data.frame(returns=returns,year=as.factor(years)), aes(x=returns, fill=year)) + geom_density(alpha=.1)#+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
ggplot(data.frame(returns=returns,year=as.factor(years)), aes(x=returns, fill=year)) + geom_density(alpha=.5)#+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
s = pops
g = s[,2:ncol(s)] / s[,1:(ncol(s)-1)]
g
t0 = seq(1,21,by=5)
corrs=c();years=c();dists=c();corrsinf=c();corrssup=c()
returns=c();growthrates =c()
for(t in 1:length(t0)){
current_dates = t0[t]:(t0[t]+10);pops = as.matrix(cities[,current_dates+3])
# correlations between time-series
# (hyp : different processes, independant in time)
s = pops
g = s[,2:ncol(s)] / s[,1:(ncol(s)-1)]
growthrates=append(growthrates,as.numeric(unlist(g)))
for(j in 1:ncol(pops)){s[,j]=s[,j]/pops[,1]}
delta_x = log(s[,2:ncol(s)]) - log(s[,1:(ncol(s)-1)])
x=as.numeric(unlist(delta_x))
returns=append(returns,x[x!=0])
#
# # fill correlation matrix
# rho = matrix(0,Ncities,Ncities)
#
# localcorrs=c();localdists=c();localcorrsinf=c();localcorrssup=c();
# for(i in 1:(Ncities-1)){show(i);for(j in (i+1):Ncities){
#   r = cor.test(as.numeric(delta_x[i,]),as.numeric(delta_x[j,]),method="pearson")
#   rho[i,j]=r$estimate;rho[j,i]=r$estimate
#   localcorrs = append(localcorrs,r$estimate);localdists=append(localdists,distances[i,j])
#   localcorrsinf = append(localcorrsinf,r$conf.int[1]);localcorrssup = append(localcorrssup,r$conf.int[2]);
# }}
# diag(rho)<-1
#
# corrs = append(corrs,localcorrs);dists=append(dists,localdists)
# corrsinf=append(corrsinf,localcorrsinf);corrssup=append(corrssup,localcorrssup)
#years=append(years,rep(dates[current_dates[length(current_dates)]],Ncities*(Ncities-1)/2))
years=append(years,rep(dates[current_dates[length(current_dates)]],length(x[x!=0])))
}
ggplot(data.frame(returns=returns,growthrate=growthrates,year=as.factor(years)), aes(x=growthrate, fill=year)) + geom_density(alpha=.5)#+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
t0 = seq(1,21,by=5)
corrs=c();years=c();dists=c();corrsinf=c();corrssup=c()
returns=c();growthrates =c()
for(t in 1:length(t0)){
current_dates = t0[t]:(t0[t]+10);pops = as.matrix(cities[,current_dates+3])
# correlations between time-series
# (hyp : different processes, independant in time)
s = pops
g = s[,2:ncol(s)] / s[,1:(ncol(s)-1)]
growthrates=append(growthrates,as.numeric(unlist(g)))
for(j in 1:ncol(pops)){s[,j]=s[,j]/pops[,1]}
delta_x = log(s[,2:ncol(s)]) - log(s[,1:(ncol(s)-1)])
x=as.numeric(unlist(delta_x))
returns=append(returns,x[x!=0])
#
# # fill correlation matrix
# rho = matrix(0,Ncities,Ncities)
#
# localcorrs=c();localdists=c();localcorrsinf=c();localcorrssup=c();
# for(i in 1:(Ncities-1)){show(i);for(j in (i+1):Ncities){
#   r = cor.test(as.numeric(delta_x[i,]),as.numeric(delta_x[j,]),method="pearson")
#   rho[i,j]=r$estimate;rho[j,i]=r$estimate
#   localcorrs = append(localcorrs,r$estimate);localdists=append(localdists,distances[i,j])
#   localcorrsinf = append(localcorrsinf,r$conf.int[1]);localcorrssup = append(localcorrssup,r$conf.int[2]);
# }}
# diag(rho)<-1
#
# corrs = append(corrs,localcorrs);dists=append(dists,localdists)
# corrsinf=append(corrsinf,localcorrsinf);corrssup=append(corrssup,localcorrssup)
#years=append(years,rep(dates[current_dates[length(current_dates)]],Ncities*(Ncities-1)/2))
years=append(years,rep(dates[current_dates[length(current_dates)]],length(g[g!=1])))
}
ggplot(data.frame(returns=returns,growthrate=growthrates,year=as.factor(years)), aes(x=growthrate, fill=year)) + geom_density(alpha=.5)#+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
t0 = seq(1,21,by=5)
corrs=c();years=c();dists=c();corrsinf=c();corrssup=c()
returns=c();growthrates =c()
for(t in 1:length(t0)){
current_dates = t0[t]:(t0[t]+10);pops = as.matrix(cities[,current_dates+3])
# correlations between time-series
# (hyp : different processes, independant in time)
s = pops
g = s[,2:ncol(s)] / s[,1:(ncol(s)-1)]
growthrates=append(growthrates,as.numeric(unlist(g[g!=1])))
for(j in 1:ncol(pops)){s[,j]=s[,j]/pops[,1]}
delta_x = log(s[,2:ncol(s)]) - log(s[,1:(ncol(s)-1)])
x=as.numeric(unlist(delta_x))
returns=append(returns,x[x!=0])
#
# # fill correlation matrix
# rho = matrix(0,Ncities,Ncities)
#
# localcorrs=c();localdists=c();localcorrsinf=c();localcorrssup=c();
# for(i in 1:(Ncities-1)){show(i);for(j in (i+1):Ncities){
#   r = cor.test(as.numeric(delta_x[i,]),as.numeric(delta_x[j,]),method="pearson")
#   rho[i,j]=r$estimate;rho[j,i]=r$estimate
#   localcorrs = append(localcorrs,r$estimate);localdists=append(localdists,distances[i,j])
#   localcorrsinf = append(localcorrsinf,r$conf.int[1]);localcorrssup = append(localcorrssup,r$conf.int[2]);
# }}
# diag(rho)<-1
#
# corrs = append(corrs,localcorrs);dists=append(dists,localdists)
# corrsinf=append(corrsinf,localcorrsinf);corrssup=append(corrssup,localcorrssup)
#years=append(years,rep(dates[current_dates[length(current_dates)]],Ncities*(Ncities-1)/2))
years=append(years,rep(dates[current_dates[length(current_dates)]],length(g[g!=1])))
}
ggplot(data.frame(returns=returns,growthrate=growthrates,year=as.factor(years)), aes(x=growthrate, fill=year)) + geom_density(alpha=.5)#+geom_vline(data=sdat, aes(xintercept=mean,  colour=type),linetype="dashed", size=1)
??fit
library(MASS)
t0 = seq(1,21,by=5)
corrs=c();years=c();dists=c();corrsinf=c();corrssup=c()
returns=c();growthrates =c()
for(t in 1:length(t0)){
current_dates = t0[t]:(t0[t]+10);pops = as.matrix(cities[,current_dates+3])
# correlations between time-series
# (hyp : different processes, independant in time)
s = pops
g = s[,2:ncol(s)] / s[,1:(ncol(s)-1)]
summary(fitdistr(as.numeric(unlist(g[g!=1])),densfun = "lognormal"))
summary(fitdistr(as.numeric(unlist(g[g!=1])),densfun = "normal"))
growthrates=append(growthrates,as.numeric(unlist(g[g!=1])))
for(j in 1:ncol(pops)){s[,j]=s[,j]/pops[,1]}
delta_x = log(s[,2:ncol(s)]) - log(s[,1:(ncol(s)-1)])
x=as.numeric(unlist(delta_x))
returns=append(returns,x[x!=0])
#
# # fill correlation matrix
# rho = matrix(0,Ncities,Ncities)
#
# localcorrs=c();localdists=c();localcorrsinf=c();localcorrssup=c();
# for(i in 1:(Ncities-1)){show(i);for(j in (i+1):Ncities){
#   r = cor.test(as.numeric(delta_x[i,]),as.numeric(delta_x[j,]),method="pearson")
#   rho[i,j]=r$estimate;rho[j,i]=r$estimate
#   localcorrs = append(localcorrs,r$estimate);localdists=append(localdists,distances[i,j])
#   localcorrsinf = append(localcorrsinf,r$conf.int[1]);localcorrssup = append(localcorrssup,r$conf.int[2]);
# }}
# diag(rho)<-1
#
# corrs = append(corrs,localcorrs);dists=append(dists,localdists)
# corrsinf=append(corrsinf,localcorrsinf);corrssup=append(corrssup,localcorrssup)
#years=append(years,rep(dates[current_dates[length(current_dates)]],Ncities*(Ncities-1)/2))
years=append(years,rep(dates[current_dates[length(current_dates)]],length(g[g!=1])))
}
t0 = seq(1,21,by=5)
corrs=c();years=c();dists=c();corrsinf=c();corrssup=c()
returns=c();growthrates =c()
for(t in 1:length(t0)){
current_dates = t0[t]:(t0[t]+10);pops = as.matrix(cities[,current_dates+3])
# correlations between time-series
# (hyp : different processes, independant in time)
s = pops
g = s[,2:ncol(s)] / s[,1:(ncol(s)-1)]
show(fitdistr(as.numeric(unlist(g[g!=1])),densfun = "lognormal")$loglik)
show(fitdistr(as.numeric(unlist(g[g!=1])),densfun = "normal")$loglik)
growthrates=append(growthrates,as.numeric(unlist(g[g!=1])))
for(j in 1:ncol(pops)){s[,j]=s[,j]/pops[,1]}
delta_x = log(s[,2:ncol(s)]) - log(s[,1:(ncol(s)-1)])
x=as.numeric(unlist(delta_x))
returns=append(returns,x[x!=0])
#
# # fill correlation matrix
# rho = matrix(0,Ncities,Ncities)
#
# localcorrs=c();localdists=c();localcorrsinf=c();localcorrssup=c();
# for(i in 1:(Ncities-1)){show(i);for(j in (i+1):Ncities){
#   r = cor.test(as.numeric(delta_x[i,]),as.numeric(delta_x[j,]),method="pearson")
#   rho[i,j]=r$estimate;rho[j,i]=r$estimate
#   localcorrs = append(localcorrs,r$estimate);localdists=append(localdists,distances[i,j])
#   localcorrsinf = append(localcorrsinf,r$conf.int[1]);localcorrssup = append(localcorrssup,r$conf.int[2]);
# }}
# diag(rho)<-1
#
# corrs = append(corrs,localcorrs);dists=append(dists,localdists)
# corrsinf=append(corrsinf,localcorrsinf);corrssup=append(corrssup,localcorrssup)
#years=append(years,rep(dates[current_dates[length(current_dates)]],Ncities*(Ncities-1)/2))
years=append(years,rep(dates[current_dates[length(current_dates)]],length(g[g!=1])))
}
t0 = seq(1,21,by=5)
corrs=c();years=c();dists=c();corrsinf=c();corrssup=c()
returns=c();growthrates =c()
for(t in 1:length(t0)){
current_dates = t0[t]:(t0[t]+10);pops = as.matrix(cities[,current_dates+3])
# correlations between time-series
# (hyp : different processes, independant in time)
s = pops
g = s[,2:ncol(s)] / s[,1:(ncol(s)-1)]
print(fitdistr(as.numeric(unlist(g[g!=1])),densfun = "lognormal"))
print(fitdistr(as.numeric(unlist(g[g!=1])),densfun = "normal"))
growthrates=append(growthrates,as.numeric(unlist(g[g!=1])))
for(j in 1:ncol(pops)){s[,j]=s[,j]/pops[,1]}
delta_x = log(s[,2:ncol(s)]) - log(s[,1:(ncol(s)-1)])
x=as.numeric(unlist(delta_x))
returns=append(returns,x[x!=0])
#
# # fill correlation matrix
# rho = matrix(0,Ncities,Ncities)
#
# localcorrs=c();localdists=c();localcorrsinf=c();localcorrssup=c();
# for(i in 1:(Ncities-1)){show(i);for(j in (i+1):Ncities){
#   r = cor.test(as.numeric(delta_x[i,]),as.numeric(delta_x[j,]),method="pearson")
#   rho[i,j]=r$estimate;rho[j,i]=r$estimate
#   localcorrs = append(localcorrs,r$estimate);localdists=append(localdists,distances[i,j])
#   localcorrsinf = append(localcorrsinf,r$conf.int[1]);localcorrssup = append(localcorrssup,r$conf.int[2]);
# }}
# diag(rho)<-1
#
# corrs = append(corrs,localcorrs);dists=append(dists,localdists)
# corrsinf=append(corrsinf,localcorrsinf);corrssup=append(corrssup,localcorrssup)
#years=append(years,rep(dates[current_dates[length(current_dates)]],Ncities*(Ncities-1)/2))
years=append(years,rep(dates[current_dates[length(current_dates)]],length(g[g!=1])))
}
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
pops[,j]/pops[,j-1]
}
pops[,j]/pops[,j-1]
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
g = pops[,j]/pops[,j-1]
show("lognormal : ",logLik(fitdistr(g,densfun = "lognormal")))
show("normal : ",logLik(fitdistr(g,densfun = "normal")))
}
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
g = pops[,j]/pops[,j-1]
show(paste0("lognormal : ",logLik(fitdistr(g,densfun = "lognormal"))))
show(paste0("normal : ",logLik(fitdistr(g,densfun = "normal"))))
}
length(dates)
ncol(pops)
###########
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
g = pops[,j]/pops[,j-1]
show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
}
par(mfrow=c(6,5))
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
g = pops[,j]/pops[,j-1]
show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
hist(g,breaks=100)
}
par(mfrow=c(6,5))
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
g = pops[,j]/pops[,j-1]
show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
hist(g,breaks=100)
}
par(mfrow=c(6,5))
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
g = pops[,j]/pops[,j-1]
show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
hist(g,breaks=100,main=dates[j])
}
load(paste0('processed/',db,'.RData'))
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Models/Analysis'))
library(dplyr)
library(igraph)
source('networkConstruction.R')
db='relevant_full_50000_eth50_nonfiltdico'
load(paste0('processed/',db,'.RData'))
g=res$g;
rm(res)
gc()
gc()
gc()
gc()
g = filterGraph(g,'data/filter.csv')
clust = clusters(g);cmax = which(clust$csize==max(clust$csize))
ggiant = induced.subgraph(g,which(clust$membership==cmax))
ggiant
d = V(ggiant)$docfreq#strength(ggiant)
gg=induced_subgraph(ggiant,which(d<10000&d>500))
edge_th = 100  # 6218
gg=subgraph.edges(gg,which(E(gg)$weight>edge_th))
gg
clust = clusters(gg);cmax = which(clust$csize==max(clust$csize))
sizes(clust)
gg = induced.subgraph(gg,which(clust$membership==cmax))
com = cluster_louvain(gg)
com
summary(degree(g))
gg=induced_subgraph(ggiant,which(d<10000&d>500&dd<1000))
dd = degree(ggiant)#strength(ggiant)/degree(ggiant)
gg=induced_subgraph(ggiant,which(d<10000&d>500&dd<1000))
gg=subgraph.edges(gg,which(E(gg)$weight>edge_th))
clust = clusters(gg);cmax = which(clust$csize==max(clust$csize))
gg = induced.subgraph(gg,which(clust$membership==cmax))
com = cluster_louvain(gg)
com
ggg
gg
sizes(com)
write.graph(gg,file = paste0('graphs/',db,'/test3.gml'),format = "gml")
g = filterGraph(g,'data/filter.csv')
g
g = filterGraph(g,'data/filter.csv')
g
clust = clusters(g);cmax = which(clust$csize==max(clust$csize))
ggiant = induced.subgraph(g,which(clust$membership==cmax))
ggiant
summary(sizes(clust))
summary(as.numeric(sizes(clust)))
quantile(as.numeric(sizes(clust)),0.9)
quantile(as.numeric(sizes(clust)),0.95)
quantile(as.numeric(sizes(clust)),0.99)
quantile(as.numeric(sizes(clust)),0.999)
ggiant = induced.subgraph(g,which(clust$membership==cmax))
d = V(ggiant)$docfreq#strength(ggiant)
dd = degree(ggiant)#strength(ggiant)/degree(ggiant)
gg=induced_subgraph(ggiant,which(d<10000&d>50&dd<1200))
gg=subgraph.edges(gg,which(E(gg)$weight>edge_th))
clust = clusters(gg);cmax = which(clust$csize==max(clust$csize))
gg = induced.subgraph(gg,which(clust$membership==cmax))
com = cluster_louvain(gg)
com
sizes(com)
write.graph(gg,file = paste0('graphs/',db,'/test4.gml'),format = "gml")
sizes(com)/length(V(gg))
sum(sizes(com)/length(V(gg)))
sum((sizes(com)/length(V(gg)))^2)
library(ggplot2)
setwd(paste0(Sys.getenv('CN_HOME'),'/Models/NetworkNecessity/InteractionGibrat'))
source('functions.R')
Ncities = 300
d = loadData(Ncities)
cities = d$cities;dates=d$dates;distances=d$distances
pops = cities[,4:ncol(cities)]
delta_p = (pops[,2:ncol(pops)]-pops[,1:(ncol(pops)-1)])/pops[,1:(ncol(pops)-1)]
pops = as.matrix(cities[,4:ncol(cities)])
s = pops
for(j in 1:ncol(pops)){s[,j]=s[,j]/pops[,1]}
delta_x = log(s[,2:ncol(s)]) - log(s[,1:(ncol(s)-1)])
dim(delta_x)
plot(delta_x)
par(mfrow=c(1,1))
plot(delta_x)
plot(1:ncol(delta_x),delta_x[1,])
plot(1:ncol(delta_x),delta_x[1,],type='l')
for(i in 2:nrow(delta_x)){points(1:ncol(delta_x),delta_x[i,],col=i)}
for(i in 2:nrow(delta_x)){points(1:ncol(delta_x),delta_x[i,],col=i,type='l')}
plot(1:ncol(delta_x),delta_x[1,],type='l')
for(i in 2:nrow(delta_x)){points(1:ncol(delta_x),delta_x[i,],col=i,type='l')}
help("chisq.test")
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
r = pops[,j]/pops[,j-1]
delta_p = (pops[,j]-pops[,j-1])/pops[,j-1]
summary(cor.test(r,pops[,j]))
#show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
#show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
#hist(g,breaks=100,main=dates[j])
}
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
r = pops[,j]/pops[,j-1]
delta_p = (pops[,j]-pops[,j-1])/pops[,j-1]
print(cor.test(r,pops[,j]))
#show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
#show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
#hist(g,breaks=100,main=dates[j])
}
for(j in 2:ncol(pops)){
r = pops[,j]/pops[,j-1]
delta_p = (pops[,j]-pops[,j-1])/pops[,j-1]
delta_x = log(r)
print(cor.test(delta_x,pops[,j]))
#show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
#show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
#hist(g,breaks=100,main=dates[j])
}
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
show(dates[j])
r = pops[,j]/pops[,j-1]
delta_p = (pops[,j]-pops[,j-1])/pops[,j-1]
delta_x = log(r)
print(cor.test(delta_x,pops[,j]))
#show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
#show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
#hist(g,breaks=100,main=dates[j])
}
load('sensitivity/relevant_full_50000_eth50_nonfiltdico_ext.RData')
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Models/Analysis'))
load('sensitivity/relevant_full_50000_eth50_nonfiltdico_ext.RData')
d
names(d)
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","density","comunitiesbalance")){
plots[[indic]] = g+geom_raster(aes_string("degree_max","edge_th",fill=indic))
}
multiplot(plotlist = plots,cols=3)
g+geom_raster(aes_string("degree_max","edge_th",fill=indic))
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
show(dates[j])
r = pops[,j]/pops[,j-1]
delta_p = (pops[,j]-pops[,j-1])/pops[,j-1]
delta_x = log(r)
print(cor.test(delta_x,diff(pops[,j])))
#show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
#show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
#hist(g,breaks=100,main=dates[j])
}
diff(pops[,j])
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
show(dates[j])
r = pops[,j]/pops[,j-1]
delta_p = (pops[,j]-pops[,j-1])/pops[,j-1]
delta_x = log(r)
print(cor.test(delta_x,(pops[,j]-pops[,j-1])))
#show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
#show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
#hist(g,breaks=100,main=dates[j])
}
#par(mfrow=c(6,5))
pops = as.matrix(cities[,4:ncol(cities)])
for(j in 2:ncol(pops)){
show(dates[j])
r = pops[,j]/pops[,j-1]
delta_p = (pops[,j]-pops[,j-1])/pops[,j-1]
delta_x = log(r)
print(cor.test(delta_x,pops[,j]))
#show(paste0("lognormal ",dates[j],": ",logLik(fitdistr(g,densfun = "lognormal"))))
#show(paste0("normal ",dates[j],": ",logLik(fitdistr(g,densfun = "normal"))))
#hist(g,breaks=100,main=dates[j])
}
load('sensitivity/relevant_full_50000_eth50_nonfiltdico_ext.RData')
names(d)
help("facet")
help("facet_grid")
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
g+geom_raster(aes_string("degree_max","edge_th",fill=indic))+facet_grid(freqmax~freqmin)
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","density","comunitiesbalance")){
plots[[indic]] = g+geom_raster(aes_string("degree_max","edge_th",fill=indic))+facet_grid(freqmax~freqmin)
}
multiplot(plotlist = plots,cols=3)
names(d)[ncol(d)]="balance"
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","density","comunitiesbalance")){
plots[[indic]] = g+geom_raster(aes_string("degree_max","edge_th",fill=indic))+facet_grid(freqmax~freqmin)
}
multiplot(plotlist = plots,cols=3)
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
names(d)[ncol(d)]="balance"
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","density","comunitiesbalance")){
plots[[indic]] = g+geom_raster(aes_string("degree_max","edge_th",fill=indic))+facet_grid(freqmax~freqmin)
}
multiplot(plotlist = plots,cols=3)
load('sensitivity/relevant_full_50000_eth50_nonfiltdico_ext.RData')
#df = data.frame(dmax,eth,modularities,comnumber,csizes,gsizes,gdensity)
names(d)[ncol(d)]="balance"
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","density","balance")){
plots[[indic]] = g+geom_raster(aes_string("degree_max","edge_th",fill=indic))+facet_grid(freqmax~freqmin)
}
multiplot(plotlist = plots,cols=3)
names(d)
load('sensitivity/relevant_full_50000_eth50_nonfiltdico_ext.RData')
#df = data.frame(dmax,eth,modularities,comnumber,csizes,gsizes,gdensity)
names(d)[ncol(d)-2]="balance"
g = ggplot(d) + scale_fill_gradient(low="yellow",high="red")#+ geom_raster(hjust = 0, vjust = 0)
plots=list()
for(indic in c("modularity","communities","components","vertices","density","balance")){
plots[[indic]] = g+geom_raster(aes_string("degree_max","edge_th",fill=indic))+facet_grid(freqmax~freqmin)
}
multiplot(plotlist = plots,cols=3)
test=data.frame()... =
test=data.frame()
test=rbind(test,c(1,2,3))
test
test
test=rbind(test,c(1,2,3))
test
kmin = 0
freqmax = 10000
params=data.frame()
for(freqmin in c(50,100)){
for(kmax in c(600,1000)){
for(edge_th in c(150,200,240)){
params=rbind(params,c(freqmin,kmax,edge_th))
}
}
}
params
