# find origin of that kernel
#  -> one of points such that : d(bord) > rcut and \forall \vec{x}\in D(rcut),d(\vec{x})<tolThr.
#pot = which(!pseudoClosing(grid>tolThreshold,r_i),arr.ind=TRUE)
#show(length(pot))
#if(length(pot)==0){
#  # Take a point with minimal density ?
#  pot = which(grid==min(grid),arr.ind=TRUE)
#}
# simplify : take deterministiquely (almost, after two exps only two points possible)
# BUT not close to border
#rbord = 2*rmax*log(Pmax/tolThreshold)
#rbord = 2*rmax
# random center
# if(max(grid)==0){
#   # random if no center yet
#   center = matrix(runif(2,min=rbord+1,max=gridSize-rbord),nrow=1)
# }
# else {
#   # else find min pop area not too close to border
#   pot = which(grid==min(grid[(rbord+1):(gridSize-rbord),(rbord+1):(gridSize-rbord)]),arr.ind=TRUE)
#   row = sample(nrow(pot),1)
#   center = matrix(pot[row,],nrow=1)
# }
center = matrix(runif(2,min=1,max=gridSize),nrow=1)
# add kernel : use kernlab laplace kernel or other
#if(kernel_type=="poisson"){ker=laplacedot(sigma=1/r_i)}
#if(kernel_type=="gaussian"){ker=rbfdot(sigma=1/(2*r_i^2))}
#if(kernel_type="quadratic"){ker=} # is quad kernel available ?
grid = grid + (d_i * matrix(kernelMatrix(kernel=laplacedot(sigma=1/r_i),x=coords,y=center),nrow=gridSize))
}
if(proba==TRUE){grid = grid / sum(grid)}
return(grid)
}
spatializedExpMixtureDensity(100,5,1.2,10)
max(spatializedExpMixtureDensity(100,5,1.2,10))
test = spatializedExpMixtureDensity(100,20,0.7,1)
persp3D(z=test)
library(plot3D)
persp3D(z=test)
test = spatializedExpMixtureDensity(100,20,0.7,0.1)
persp3D(z=test)
test = spatializedExpMixtureDensity(50,20,0.7,0.1)
persp3D(z=test)
test = spatializedExpMixtureDensity(50,10,0.7,0.05)
persp3D(z=test)
spatializedExpMixtureDensity <- function(gridSize,N,alpha,centerDensity,proba=TRUE,rmin=0,rmax=0,Pmax=1,tolThreshold=0,kernel_type="poisson"){
#if(rmin==0){rmin = gridSize/N}
#if(rmax==0){rmax = gridSize/N}
# patches of the grid are 1 unit size (in r_min/max units)
grid = matrix(0,gridSize,gridSize)
# matrix of coordinates
coords = matrix(c(c(matrix(rep(1:gridSize,gridSize),nrow=gridSize)),c(matrix(rep(1:gridSize,gridSize),nrow=gridSize,byrow=TRUE))),nrow=gridSize^2)
# first draw param distribs ? not needed
# for exp distribs, P_i = 2pi*d_i*r_i^2
#  -> take P from deterministic distrib ; draw r.
for(i in 1:N){
show(i)
pop_i = Pmax*i^{-alpha}
d_i = centerDensity
r_i = sqrt(pop_i/(2*pi*d_i))
show(r_i)
#r_i = runif(1,min=rmin,max=rmax)
#d_i = pop_i / (2*pi*(r_i^2))
# find origin of that kernel
#  -> one of points such that : d(bord) > rcut and \forall \vec{x}\in D(rcut),d(\vec{x})<tolThr.
#pot = which(!pseudoClosing(grid>tolThreshold,r_i),arr.ind=TRUE)
#show(length(pot))
#if(length(pot)==0){
#  # Take a point with minimal density ?
#  pot = which(grid==min(grid),arr.ind=TRUE)
#}
# simplify : take deterministiquely (almost, after two exps only two points possible)
# BUT not close to border
#rbord = 2*rmax*log(Pmax/tolThreshold)
#rbord = 2*rmax
# random center
# if(max(grid)==0){
#   # random if no center yet
#   center = matrix(runif(2,min=rbord+1,max=gridSize-rbord),nrow=1)
# }
# else {
#   # else find min pop area not too close to border
#   pot = which(grid==min(grid[(rbord+1):(gridSize-rbord),(rbord+1):(gridSize-rbord)]),arr.ind=TRUE)
#   row = sample(nrow(pot),1)
#   center = matrix(pot[row,],nrow=1)
# }
center = matrix(runif(2,min=1,max=gridSize),nrow=1)
# add kernel : use kernlab laplace kernel or other
#if(kernel_type=="poisson"){ker=laplacedot(sigma=1/r_i)}
#if(kernel_type=="gaussian"){ker=rbfdot(sigma=1/(2*r_i^2))}
#if(kernel_type="quadratic"){ker=} # is quad kernel available ?
grid = grid + (d_i * matrix(kernelMatrix(kernel=laplacedot(sigma=1/r_i),x=coords,y=center),nrow=gridSize))
}
if(proba==TRUE){grid = grid / sum(grid)}
return(grid)
}
test = spatializedExpMixtureDensity(50,10,0.7,0.05)
test = spatializedExpMixtureDensity(100,10,0.7,0.05)
test = spatializedExpMixtureDensity(100,10,0.7,0.01)
persp3D(z=test)
test = spatializedExpMixtureDensity(50,10,0.7,0.01)
persp3D(z=test)
test = spatializedExpMixtureDensity(50,10,0.7,0.01)
persp3D(z=test)
test = spatializedExpMixtureDensity(50,10,0.7,0.005)
persp3D(z=test)
install.packages("corrplot")
library(corrplot)
help("corrplot")
data(mtcars)
M <- cor(mtcars)
corrplot(M, method = "number", col = "black", cl.pos = "n")
corrplot(M, method="color", col=col1(20), cl.length=21,order = "AOE", addCoef.col="grey")
col1 <- colorRampPalette(c("#7F0000","red","#FF7F00","yellow","white",
"cyan", "#007FFF", "blue","#00007F"))
corrplot(M, method="color", col=col1(20), cl.length=21,order = "AOE", addCoef.col="grey")
corrplot(M,order="AOE",type="upper",tl.pos="d")
corrplot(M,add=TRUE, type="lower", method="ell",order="AOE",
diag=FALSE,tl.pos="n", cl.pos="n")
library(dplyr)
library(readODS)
data <- read.csv(file=paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized/data.csv'),sep = ";",header=T)
data <- as.tbl(read.csv(file=paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized/data.csv'),sep = ";",header=T))
data
data$nameZH <- c("深圳","斗门","香洲","广州","诰命","江门","信汇","开平","河山",
"肇庆","撕毁","会城","会养","徽州","中山","东莞")
library(rgdal)
areas <- readOGR('stylized','areas')
getwd()
areas <- readOGR(paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized'),'areas')
plot(areas)
areas@data
data
areas@data <- left_join(areas@data,data)
areas$id <- as.numeric(as.character(areas$id))
areas@data <- left_join(areas@data,data)
areas@data
writeOGR(areas,paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized'),'areas_data')
help(writeOGR)
ogrDrivers()
writeOGR(areas,paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized'),'areas_data.shp')
writeOGR(areas,paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized'),'areas_data',driver = "ESRI Shapefile")
writeOGR(obj = areas,dsn = paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized'),layer = 'areas_data',driver = "ESRI Shapefile")
paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized')
areas <- readOGR(paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized'),'areas')
areas$id <- as.numeric(as.character(areas$id))
dim(areas@data)
dim(left_join(areas@data,data))
left_join(areas@data,data)
data
left_join(areas@data,data,by=c("id"="id"))
areas@data
data <- as.tbl(read.csv(file=paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized/data.csv'),sep = ";",header=T))
data$nameZH <- c("深圳","斗门","香洲","广州","诰命","江门","信汇","开平","河山",
"肇庆","撕毁","会城","会养","徽州","中山","东莞")
areas <- readOGR(paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized'),'areas')
areas$id <- as.numeric(as.character(areas$id))
left_join(areas@data,data,by=c("id"="id"))
areas@data <- left_join(areas@data,data,by=c("id"="id"))
writeOGR(obj = areas,dsn = paste0(Sys.getenv('CN_HOME'),'/Models/Governance/MetropolSim/Lutecia/setup/gis/guangdong/stylized'),layer = 'areas_data',driver = "ESRI Shapefile")
library(rgdal)
library(cartography)
dep <- readOGR(paste0(Sys.getenv('CS_HOME'),'/Data/OSM/departements-20140306-100m-shp'),'departements-20140306-100m')
dep$code_insee
dep <- readOGR(paste0(Sys.getenv('CS_HOME'),'/Data/OSM/departements-20140306-100m-shp'),'departements-20140306-100m',stringsAsFactors = F)
dep$code_insee
ids = dep$code_insee[sapply(dep$code_insee,nchar)==2]
ids
data = data.frame(var = rnorm(length(ids)),id=ids)
data
dep = dep[dep$code_insee%in%data$id]
data$id
data = data.frame(var = rnorm(length(ids)),id=ids,stringsAsFactors = F)
data
data$id
dep$code_insee
dep = dep[dep$code_insee%in%data$id]
dep$code_insee
dep = dep[dep$code_insee%in%data$id,]
dep$code_insee
cols <- carto.pal(pal1 = "green.pal", n1 = 2, pal2 = "red.pal",n2 = 4)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = var_name,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "black",
south = F,north = T)
names(data)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id"
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "black",
south = F,north = T)
cols <- carto.pal(pal1 = "green.pal", n1 = 2, pal2 = "red.pal",n2 = 4)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "black",
south = F,north = T)
cols <- carto.pal(pal1 = "green.pal", n1 = 5, pal2 = "red.pal",n2 = 5)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "black",
south = F,north = T)
cols <- carto.pal(pal1 = "green.pal", n1 = 5, pal2 = "red.pal",n2 = 5)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "white",
south = F,north = T,bg = "black")
cols <- carto.pal(pal1 = "green.pal", n1 = 5, pal2 = "red.pal",n2 = 5)
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE, col = NA,
scale = T,coltitle = "white",
south = F,north = T,col="black")
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2,
add = TRUE)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = T,coltitle = "white",
south = F,north = T,col="black")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = T,coltitle = "white",
south = F,north = T,col="black")
help(layoutLayer)
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 100,coltitle = "white",
south = F,north = T,col="black")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 1,coltitle = "white",
south = F,north = T,col="black")
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 1,coltitle = "white",
south = F,north = T,col="black")
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 1,coltitle = "white",
south = F,north = T,col="black")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "right",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 0,coltitle = "white",
south = F,north = T,col="black")
plot(dep, border = NA, col = NA, bg = "#A6CAE0")
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = 0,coltitle = "white",
south = F,north = T,col="black")
crs(dep)
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
choroLayer(spdf = dep,df = data,var = "var",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dep <- readOGR(paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/departements-20140306-100m-shp'),'departements-20140306-100m',stringsAsFactors = F)
library(rgdal)
library(cartography)
# load data
dep <- readOGR(paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/departements-20140306-100m-shp'),'departements-20140306-100m',stringsAsFactors = F)
data = read.csv(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/cd.csv'),sep=';',stringsAsFactors = F)
data$id = ifelse(sapply(as.character(data$dept),nchar)>=2,as.character(data$dept),paste0("0",as.character(data$dept)))
# select your deps (france métropolitaine ?)
#dep = dep[sapply(dep$code_insee,nchar)==2,]
dep = dep[dep$code_insee%in%data$id,]
# -> pas besoin de faire la jointure à la main, la primitive de carto le fait
# palette de couleur, nb de classes doit correspondre à celui dans le choroLayer
cols <- carto.pal(pal1 = "green.pal", n1 = 5, pal2 = "red.pal",n2 = 5)
png(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/map.png'),width = 12,height=10,units='cm')
choroLayer(spdf = dep,df = data,var = "CD_emp",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2,legend.nodata = "No Data"
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
png(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/map.png'),width = 12,height=10,units='cm',res = 300)
choroLayer(spdf = dep,df = data,var = "CD_emp",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2,legend.nodata = "No Data"
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
png(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/map.png'),width = 12,height=10,units='cm',res = 300)
par(mar=c(1.0,1.0,1.0,1.0))
choroLayer(spdf = dep,df = data,var = "CD_emp",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2,legend.nodata = "No Data"
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
png(file=paste0(Sys.getenv('CS_HOME'),'/Misc/Anto/map.png'),width = 13,height=10,units='cm',res = 300)
par(mar=c(1.5,1.5,1.5,1.5))
choroLayer(spdf = dep,df = data,var = "CD_emp",
spdfid = "code_insee",dfid="id",nclass = 10,
col = cols,border = "grey40",lwd = 0.5, legend.pos = "left",
legend.title.txt = "Legend Title",legend.values.rnd = 2,legend.nodata = "No Data"
# ,add = TRUE
)
plot(dep,border = "grey20", lwd=0.75, add=TRUE)
layoutLayer(title = "Map Title", author = "",
sources = "", frame = TRUE,
scale = NULL,coltitle = "white",
south = F,north = T,col="black")
dev.off()
installed.packages()
head(installed.packages())
installed.packages[c("cartography","rgdal"),c("Version")]
installed.packages[c("cartography","rgdal"),]
installed.packages()[c("cartography","rgdal"),c("Version")]
measures
library(igraph)
setwd(paste0(Sys.getenv('MONITORAT'),'/L2AnalyseSpatiale/Partiel/NetworkResilience'))
source('functions.R')
n = 100
# real road network ; optimized network ?
networktypes = c("lattice","pa-age","random","tree","real")
realnetworks = c("idf","lacourtine","londonM25","lyon","paris","randstad")
indicators = c("stats","gamma","betweenness","diameter","closeness","transitivity","efficiency","modularity")
measures = c(gamma,normalizedBetweenness,shortestPathMeasures,clustCoef,louvainModularity)
getwd()
library(igraph)
library(dplyr)
setwd(paste0(Sys.getenv('MONITORAT'),'/L2AnalyseSpatiale/Partiel/NetworkResilience'))
source('functions.R')
n = 1000
# real road network ; optimized network ?
networktypes = c("lattice","pa-age","random","tree","real")
realnetworks = c("idf","lacourtine","londonM25","lyon","paris","randstad")
indicators = c("stats","gamma","betweenness","diameter","closeness","transitivity","efficiency","modularity")
measures = c(gamma,normalizedBetweenness,shortestPathMeasures,clustCoef,louvainModularity)
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Models/Analysis'))
source('networkConstruction.R')
source('citationNWConstruction.R')
#####
## Construct the citation nw from raw data
#  csv -> RData
citnwedgefile = paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Data/nw/full_edges.csv')
citnwnodefile = paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Data/nw/full_nodes.csv')
citnwoutput=paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Data/nw/citationNetwork.RData')
Sys.getenv('CS_HOME')
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/Models/cybergeo20/HyperNetwork/Models/Analysis'))
source('networkConstruction.R')
source('citationNWConstruction.R')
citnwedgefile = paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Data/nw/full_edges.csv')
citnwnodefile = paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Data/nw/full_nodes.csv')
citnwoutput=paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Data/nw/citationNetwork.RData')
load(citnwoutput)
citnwedgefile = paste0(Sys.getenv('CS_HOME'),'/Cybergeo/Models/cybergeo20/HyperNetwork/Data/nw/full_edges.csv')
citnwnodefile = paste0(Sys.getenv('CS_HOME'),'/Cybergeo/Models/cybergeo20/HyperNetwork/Data/nw/full_nodes.csv')
citnwoutput=paste0(Sys.getenv('CS_HOME'),'/Cybergeo/Models/cybergeo20/HyperNetwork/Data/nw/citationNetwork.RData')
load(citnwoutput)
gcitation
head(gcitation$title)
head(V(gcitation)$title)
length(components(gcitation)$membership)
length(components(gcitation)$csize)
components(gcitation)$csize
core = induced_subgraph(gcitation,which(components(raw)$membership==1))
core = induced_subgraph(gcitation,which(components(gcitation)$membership==1))
V(core)$reduced_title = sapply(V(core)$title,function(s){paste0(substr(s,1,30),"...")})
V(core)$reduced_title = ifelse(degree(core)>50,V(core)$reduced_title,rep("",vcount(core)))
rawcore = induced_subgraph(core,which(degree(core)>1))
rawcore
write_graph(rawcore,file=paste0(Sys.getenv('CS_HOME'),'/Cybergeo/Models/cybergeo20/HyperNetwork/Data/nw/rawcore.gml'),format = 'gml')
max(degree(rawcore))
min(degree(rawcore))
core = induced_subgraph(gcitation,which(components(gcitation)$membership==1))
V(core)$reduced_title = sapply(V(core)$title,function(s){paste0(substr(s,1,30),"...")})
V(core)$reduced_title = ifelse(degree(core)>50,V(core)$reduced_title,rep("",vcount(core)))
while(min(degree(core))==1){
show(min(degree(core)))
core = induced_subgraph(core,which(degree(core)>1))
}
core
min(degree(core))
write_graph(core,file=paste0(Sys.getenv('CS_HOME'),'/Cybergeo/Models/cybergeo20/HyperNetwork/Data/nw/core.gml'),format = 'gml')
