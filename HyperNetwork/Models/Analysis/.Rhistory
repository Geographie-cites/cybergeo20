ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
data_ways
as_igraph(data_ways)
graph = as_igraph(data_ways)
graph
plot(graph)
help(igraph)
clusters(graph)
decompose.graph(graph)
bigcomponent = decompose.graph(graph)[[1]]
bigcomponent
help(betweeness)
help(betwenness)
betweenness(bigcomonent)
betweenness(bigcomponent)
hist(betweenness(bigcomponent))
hist(betweenness(bigcomponent),break=100)
hist(betweenness(bigcomponent),breaks=100)
degree.distribution(bigcomponent)
plot(degree.distribution(bigcomponent))
plot(degree.distribution(bigcomponent),type=l)
plot(degree.distribution(bigcomponent),type="l")
area <- center_bbox(2.3815,48.8265,2000,2000)
data <- get_osm(area,source = api)
data
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
graph = as_igraph(data_ways)
clusters(graph)
bigcomponent = decompose.graph(graph)[[1]]
hist(betweenness(bigcomponent),breaks=100)
hist(betweenness(bigcomponent),breaks=500)
hist(log(betweenness(bigcomponent)),breaks=500)
hist(betweenness(bigcomponent),breaks=500)
betweenness(bigcomponent)
mean(betweenness(bigcomponent))
radius(bigcomponent)
graph
graph$weight
E(graph)
leading.eigenvector.community(bigcomponent)
leading.eigenvector.community(bigcomponent,steps=10000)
edge.betweenness.community(bigcomponent)
membership(edge.betweenness.community(bigcomponent))
help(layout)
layout.fruchterman.reingold(graph)
layout.fruchterman.reingold(bigcomponent)
com <- membership(edge.betweenness.community(bigcomponent))
lay<-layout.fruchterman.reingold(bigcomponent)
plot(bigcomponent,layout=lay,col=com)
plot(bigcomponent,layout=lay,vertex.col=com)
help(igraph.plot)
com
plot(bigcomponent,layout=lay)
lay
plot(bigcomponent,layout=lay)
plot.graph(bigcomponent,layout=lay)
plot.igraph(bigcomponent,layout=lay)
library(rgexf)
help(rgexf)
igraph.to.graph(bigcomponent)
igraph.to.gexf(bigcomponent)
E(bigcomponent)
E(bigcomponent)$weights
help(as_igrph)
help(as_igraph)
source(as_igraph)
view_source()
graph
graph$V
V(graph)
E(graph)
V(graph)$weight
help(attr)
plot.igraph(bigcomponent,layout=layout.fruchterman.reingold,vertex.color=com)
dim(V(bigcomponent))
V(bigcomponent)
length(V(bigcomponent))
length(E(bigcomponent))
plot.igraph(bigcomponent,layout=layout.fruchterman.reingold,vertex.color=com)
help(plot.igraph)
help(layout)
plot.igraph(bigcomponent,layout=layout.auto,vertex.color=com,label=NA)
plot.igraph(bigcomponent,layout=layout.auto,vertex.color=com,vertex.label=NA)
length(E(bigcomponent))
E(bigcomponent)$weight
V(bigcomponent)$weight
E(bigcomponent)$weight
help(igraph)
str.igraph(bigcomponent)
print.igraph(bigcomponent)
get.edge.attribute(bigcomponent)
names(V(bigcomponent))
graph.attributes(graph)
edge.attributes(graph)
names(edge.attributes(graph))
names(vertex.attributes(graph))
data_ways
data_ways$nodes
names(data_ways$nodes)
naattrsmes(data_ways$nodes)
attrs(data_ways$nodes)
data_ways$nodes$attrs
data_ways$nodes$attrs[1:10,]
V(graph)$id
names(vertex.attributes(graph))
V(graph)$name
names(data$ways$attrs)
data_ways$nodes$attrs
data_ways$nodes$attrs
names(data_ways$nodes$attrs)
x = data_ways$nodes$attrs$lat
y = x = data_ways$nodes$attrs$lon
y =  data_ways$nodes$attrs$lon
x = data_ways$nodes$attrs$lat
y =  data_ways$nodes$attrs$lon
x = data_ways$nodes$attrs$lat
y = data_ways$nodes$attrs$lon
V(graph)$name
V(graph)$x=x
length(x)
length(V(graph))
length(V(graph)$name)
V(graph)$name==names(data_ways$nodes$attrs)
names(data_ways$nodes$attrs)
data_ways$nodes$attrs$id
data_ways$nodes$attrs$id==V(graph)$name
help(graph.empty)
data_ways$nodes
data_ways$nodes$attrs
head(data_ways$nodes$attrs)
head(data_ways$ways$attrs)
head(data_ways$ways)
head(data_ways$ways,n=1)
data_ways$ways[[1]]
names(data_ways$ways)
names(data_ways$ways$refs)
names(data_ways$ways$tags)
names(data_ways$ways)
names(data_ways$ways$attrs)
names(data_ways)
names(data_ways$relations)
names(data_ways$relations$attrs)
names(data_ways$relations$tags)
names(data_ways$relations$refs)
data_ways$relations$refs$type
data_ways$relations$refs$ref
summary(data_ways)
help(as_igraph)
osmar$ways$attrs$uid
data_ways$ways$attrs$uid
data_ways$ways$refs$uid
data_ways$ways$refs
names(data_ways$ways$refs)
graph = graph.edgelist(data_ways$ways$refs)
is.data.frame(data_ways$ways$refs)
is.matrix(data_ways$ways$refs)
graph = graph.edgelist(as.matrix(data_ways$ways$refs))
dim(as.matrix(data_ways$ways$refs))
help(graph.edgelist()
)
help(graph.edgelist)
dim(as.numeric(as.matrix(data_ways$ways$refs)))
as.numeric(as.matrix(data_ways$ways$refs))
length(as.numeric(as.matrix(data_ways$ways$refs)))
graph.edgelist(matrix(data=c(1,0,0,1),nrow=2))
graph.edgelist(matrix(data=c(2,1,1,2),nrow=2))
summary(as.matrix(data_ways$ways$refs))
graph = graph.edgelist(as.matrix(data_ways$ways$refs))
summary(data_ways)
library(rgexf)
help(rgexf)
help(read.gexf)
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23/35/42-CET-2015.gexf'))
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015.gexf'))
graph = gexf.to.igraph(graph_gexf)
graph_gexf
summary(graph_gexf)
check.dpl.edges(graph_gexf)
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015.gexf'))
graph = gexf.to.igraph(graph_gexf)
measures <- read.csv(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015_Nodes.csv'))
measures <- read.csv(
paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015_Nodes.csv'),
sep=';'
)
summary(measures)
measures$is_cyber
is.na(measures$cybergeo)
colNames(measures)
colnames(measures)
mean(measures$Degré.Entrant)
mean(measures$Degré.Entrant[!is.na(measures$cybergeo)])
summary(measures$Degré.Entrant[!is.na(measures$cybergeo)])
length(measures$Degré.Entrant[!is.na(measures$cybergeo)])
hist(measures$Degré.Entrant[!is.na(measures$cybergeo)])
hist(measures$Degré.Entrant[!is.na(measures$cybergeo)],breaks=100)
indeg = measures$Degré.Entrant[!is.na(measures$cybergeo)]
hist(indeg,breaks=100)
which(indeg==max(indeg))
measures[908,]
max(indeg)
cyb = measures[!is.na(measures$cybergeo),]
dim(cyb)
cyb[which(indeg==max(indeg)),]
mean(cyb$Degré.Entrant)
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.9)])
quantile(cyb$Degré.Entrant,0.9)
quantile(cyb$Degré.Entrant,0.95)
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.95)])
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.99)])
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.90)])
quantiles = (1:100)/100
quantiles
impactFactor=mean(cyb$Degré.Entrant)
help(lapply)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.10)])
quantile(cyb$Degré.Entrant,0.10)
quantiles = (60:100)/100
impactFactor=mean(cyb$Degré.Entrant)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
quantile(cyb$Degré.Entrant,1)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<=quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
quantiles = (50:100)/100
impactFactor=mean(cyb$Degré.Entrant)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<=quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
plot(quantiles,contrQuantile,type="l")
x=rnorm(100)
x
y=rnorm(100)
plot(x,y,axis=FALSE)
plot(x,y,axes=FALSE)
axis(1,pos=0,5)
axis(1,pos=0)
axis(0,pos=0)
axis(2,pos=0)
df
data
d
d <- function(w){
years = c(1,8,17)
dispo = c(27,5 + w * 10,3+w)
return(data.frame(x=years,y=dispo,xl=log(years),yl=log(dispo)))
}
d(0.5)
weights = (1:100)/100
weights
lm(x~y,d(0.5))
slotnames(lm(x~y,d(0.5)))
slotNames(lm(x~y,d(0.5)))
names(lm(x~y,d(0.5)))
names(summary(lm(x~y,d(0.5)))
)
help(append)
weights = (1:100)/100
rlin = c()
rloglin = c()
for(w in weights){
rlin = append(rlin,summary(lm(y~x,d(w)))$adj.r.squared)
rloglin = append(rloglin,summary(lm(yl~xl,d(w)))$adj.r.squared)
}
rlin
rloglin
plot(weights,rlin)
plot(weights,rloglin)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
overlap <- read.table('Models//Techno//TechnoClasses//res//overlap.csv',sep=";")
links = 0
for(i in 1:nrow(overlap)){
show(i)
links = links + (overlap[i,i]^2)
if(i<nrow(overlap)){
for(j in (i+1):ncol(overlap)){
overlap[j,j] = overlap[j,j] - overlap[i,j]
}
}
}
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
Sys.getenv('CS_HOME')
pr <- prcomp(cormat[1,8:17])
setwd(paste0(Sys.getenv('CN_HOME'),'/Results/Synthetic/Network'))
setwd(paste0(Sys.getenv('CN_HOME'),'/Results/Synthetic/Network'))
getwd()
install.packages('cartography')
install.packages('cartography',source=T)
help(install.packages)
install.packages('cartography',type='source')
library(cartography)
help(cartography)
citation(package="cartography")
resdir='20160106_LHSDensityNW/data/'
cartography: vignette(topic = "cartography")
cartography:vignette(topic = "cartography")
vignette(topic = "cartography")
data("nuts2006")
EuropeStamen <- getTiles(spdf = nuts0.spdf, type = "stamen-watercolor")
install.packages('OpenStreetMap')
EuropeStamen <- getTiles(spdf = nuts0.spdf, type = "stamen-watercolor")
tilesLayer(EuropeStamen)
plot(nuts0.spdf, add=TRUE)
mtext(text = "Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under CC BY SA.",
side = 1, adj = 0, cex = 0.7, font = 3)
install.packages('shiny')
shiny::runApp('~/Documents/ComplexSystems/Misc/Anna/063-superzip-example')
library(maps)
library(mapdata)
library(rworldmap)
library(igraph)
install.packages("igraph")
library(igraph)
help(igraph)
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/HyperNetwork/Models/Analysis'))
library(RSQLite)
db = dbConnect(SQLite(),"../Semantic/bootstrap/run_kw1000_csize2000_b20/bootstrap.sqlite3")
relevant = dbReadTable(db,'relevant')
dico = dbReadTable(db,'dico')
rel = list()
for(i in 1:nrow(relevant)){rel[[relevant[i,1]]]=i}
cooccs = matrix(0,nrow(relevant),nrow(relevant))
cooccs = matrix(0,nrow(relevant),nrow(relevant))
for(i in 1:nrow(dico)){
if(i%%1000==0){show(i)}
kws = strsplit(dico[i,2],";")[[1]]
if(length(kws)>1){
for(k in 1:(length(kws)-1)){
for(l in (k+1):(length(kws))){
if(nchar(kws[k])>0&nchar(kws[l])>0){
cooccs[rel[[kws[k]]],rel[[kws[l]]]]=cooccs[rel[[kws[k]]],rel[[kws[l]]]]+1
}
}
}
}
}
names(unlist(rel))
colnames(cooccs) = names(unlist(rel))
threshold=1000
adjacency=cooccs;adjacency[adjacency<threhold]=0
adjacency=cooccs;adjacency[adjacency<threshold]=0
g = graph_from_adjacency_matrix(adjacency,weighted=TRUE)
g
threshold=100
adjacency=cooccs;adjacency[adjacency<threshold]=0
g = graph_from_adjacency_matrix(adjacency,weighted=TRUE)
g
threshold=500
adjacency=cooccs;adjacency[adjacency<threshold]=0
g = graph_from_adjacency_matrix(adjacency,weighted=TRUE)
g
clust = clusters(g);cmax = which(clust$csize==max(clust$csize))
g = induced.subgraph(g,which(clust$membership==cmax))
g
com = cluster_fast_greedy(g)
g = graph_from_adjacency_matrix(adjacency,weighted=TRUE,directed=FALSE)
help(graph_from_adjacency_matrix)
help(graph_from_adjacency_matrix)
g = graph_from_adjacency_matrix(adjacency,weighted=TRUE,mode="undirected")
# keep giant component
clust = clusters(g);cmax = which(clust$csize==max(clust$csize))
g = induced.subgraph(g,which(clust$membership==cmax))
g
com = cluster_fast_greedy(g)
com
sizes(com)
help(cluster_fast_greedy)
com=cluster_louvain(g)
com
sizes(com)
com$modularity
com$`2`
com$groups
head(dico)
sort(relevant[,2])
sort(relevant[,2],decreasing=TRUE)
help(sort)
library(dplyr)
as.tbl(dico)
help(dplyr)
as.tbl(relevant)
as.tbl(relevant) %>% arrange(desc(cumtermhood))
srel = as.tbl(relevant) %>% arrange(desc(cumtermhood))
srel$keyword
srel$keyword[1:100]
srel$keyword[1:200]
srel$keyword[1:300]
kwthreshold = 300
srel = srel[1:kwthreshold,]
kwthreshold = 500
srel = srel[1:kwthreshold,]
srel
srel$keyword
srel = as.tbl(relevant) %>% arrange(desc(cumtermhood))
#dim(relevant)
#sort(relevant[,2],decreasing=TRUE)
kwthreshold = 500
srel = srel[1:kwthreshold,]
srel$keyword
# construct relevant dico : word -> index
rel = list()
for(i in 1:nrow(srel)){rel[[srel[i,1]]]=i}
cooccs = matrix(0,nrow(srel),nrow(srel))
for(i in 1:nrow(dico)){
if(i%%1000==0){show(i)}
kws = strsplit(dico[i,2],";")[[1]]
if(length(kws)>1){
for(k in 1:(length(kws)-1)){
for(l in (k+1):(length(kws))){
if(nchar(kws[k])>0&nchar(kws[l])>0){
cooccs[rel[[kws[k]]],rel[[kws[l]]]]=cooccs[rel[[kws[k]]],rel[[kws[l]]]]+1
}
}
}
}
}
srel[i,1]
srel = as.tbl(relevant) %>% arrange(desc(cumtermhood))
#dim(relevant)
#sort(relevant[,2],decreasing=TRUE)
kwthreshold = 500
srel = srel[1:kwthreshold,]
rel = list()
for(i in 1:nrow(srel)){rel[[srel[i,1]]]=i}
i
head(srel)
i
srel[i,1]
rel = list()
nrow(srel)
for(i in 1:nrow(srel)){rel[[srel[i,1]]]=i}
srel = as.tbl(relevant) %>% arrange(desc(cumtermhood))
#dim(relevant)
#sort(relevant[,2],decreasing=TRUE)
kwthreshold = 500
srel = srel[1:kwthreshold,]
rel = list()
for(i in 1:nrow(srel)){rel[[srel[i,1]]]=i}
srel = as.tbl(relevant) %>% arrange(desc(cumtermhood))
#dim(relevant)
#sort(relevant[,2],decreasing=TRUE)
kwthreshold = 500
srel = as.tbl(relevant) %>% arrange(desc(cumtermhood))
kwthreshold = 500
srel = srel[1:kwthreshold,]
srel$keyword
rel = list()
for(i in 1:length(srel$keyword)){rel[[srel$keyword[i]]]=i}
rel
cooccs = matrix(0,nrow(srel),nrow(srel))
for(i in 1:nrow(dico)){
if(i%%1000==0){show(i)}
kws = strsplit(dico[i,2],";")[[1]]
if(length(kws)>1){
for(k in 1:(length(kws)-1)){
for(l in (k+1):(length(kws))){
if(nchar(kws[k])>0&nchar(kws[l])>0){
cooccs[rel[[kws[k]]],rel[[kws[l]]]]=cooccs[rel[[kws[k]]],rel[[kws[l]]]]+1
}
}
}
}
}
colnames(cooccs) = names(unlist(rel))
co=c(cooccs)
hist(co,breaks=100)
colnames(cooccs) = names(unlist(rel))
# filter edges
threshold=500
adjacency=cooccs;adjacency[adjacency<threshold]=0
g = graph_from_adjacency_matrix(adjacency,weighted=TRUE,mode="undirected")
g
clust = clusters(g);cmax = which(clust$csize==max(clust$csize))
g = induced.subgraph(g,which(clust$membership==cmax))
com = cluster_fast_greedy(g)
com=cluster_louvain(g)
com
help(cluster_louvain)
com=cluster_edge_betweenness(g)
library(graph)
install.packages(graph)
install.packages("graph")
help(hclust)
help(dist)
scooccs = (cooccs+t(cooccs))/2
d = as.dist(m=1-scooccs/max(scooccs))
d
clust = hclust(d,method="single")
plot(clust)
clust = hclust(d)
plot(clust)
plot(d,labels=FALSE)
plot(clust,labels=FALSE)
plot.hclust(clust,labels=FALSE)
plot(clust,labels=FALSE)
