data_ways$ways$attrs
plot_ways(data_ways)
data_ways = subset(data,way_ids=hways)
help(subset)
demo(navigate)
demo(navigate,package="osmar")
demo(package="osmar")
demo(navigator,package="osmar")
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
data_ways
as_igraph(data_ways)
graph = as_igraph(data_ways)
graph
plot(graph)
help(igraph)
clusters(graph)
decompose.graph(graph)
bigcomponent = decompose.graph(graph)[[1]]
bigcomponent
help(betweeness)
help(betwenness)
betweenness(bigcomonent)
betweenness(bigcomponent)
hist(betweenness(bigcomponent))
hist(betweenness(bigcomponent),break=100)
hist(betweenness(bigcomponent),breaks=100)
degree.distribution(bigcomponent)
plot(degree.distribution(bigcomponent))
plot(degree.distribution(bigcomponent),type=l)
plot(degree.distribution(bigcomponent),type="l")
area <- center_bbox(2.3815,48.8265,2000,2000)
data <- get_osm(area,source = api)
data
hways <- find(data, way(tags(k == "highway")))
data_ways = subset(data,way_ids=hways)
ids = find(data_ways,way(tags(k == "name")))
ids = find_down(data,way(ids))
data_ways = subset(data,ids=ids)
graph = as_igraph(data_ways)
clusters(graph)
bigcomponent = decompose.graph(graph)[[1]]
hist(betweenness(bigcomponent),breaks=100)
hist(betweenness(bigcomponent),breaks=500)
hist(log(betweenness(bigcomponent)),breaks=500)
hist(betweenness(bigcomponent),breaks=500)
betweenness(bigcomponent)
mean(betweenness(bigcomponent))
radius(bigcomponent)
graph
graph$weight
E(graph)
leading.eigenvector.community(bigcomponent)
leading.eigenvector.community(bigcomponent,steps=10000)
edge.betweenness.community(bigcomponent)
membership(edge.betweenness.community(bigcomponent))
help(layout)
layout.fruchterman.reingold(graph)
layout.fruchterman.reingold(bigcomponent)
com <- membership(edge.betweenness.community(bigcomponent))
lay<-layout.fruchterman.reingold(bigcomponent)
plot(bigcomponent,layout=lay,col=com)
plot(bigcomponent,layout=lay,vertex.col=com)
help(igraph.plot)
com
plot(bigcomponent,layout=lay)
lay
plot(bigcomponent,layout=lay)
plot.graph(bigcomponent,layout=lay)
plot.igraph(bigcomponent,layout=lay)
library(rgexf)
help(rgexf)
igraph.to.graph(bigcomponent)
igraph.to.gexf(bigcomponent)
E(bigcomponent)
E(bigcomponent)$weights
help(as_igrph)
help(as_igraph)
source(as_igraph)
view_source()
graph
graph$V
V(graph)
E(graph)
V(graph)$weight
help(attr)
plot.igraph(bigcomponent,layout=layout.fruchterman.reingold,vertex.color=com)
dim(V(bigcomponent))
V(bigcomponent)
length(V(bigcomponent))
length(E(bigcomponent))
plot.igraph(bigcomponent,layout=layout.fruchterman.reingold,vertex.color=com)
help(plot.igraph)
help(layout)
plot.igraph(bigcomponent,layout=layout.auto,vertex.color=com,label=NA)
plot.igraph(bigcomponent,layout=layout.auto,vertex.color=com,vertex.label=NA)
length(E(bigcomponent))
E(bigcomponent)$weight
V(bigcomponent)$weight
E(bigcomponent)$weight
help(igraph)
str.igraph(bigcomponent)
print.igraph(bigcomponent)
get.edge.attribute(bigcomponent)
names(V(bigcomponent))
graph.attributes(graph)
edge.attributes(graph)
names(edge.attributes(graph))
names(vertex.attributes(graph))
data_ways
data_ways$nodes
names(data_ways$nodes)
naattrsmes(data_ways$nodes)
attrs(data_ways$nodes)
data_ways$nodes$attrs
data_ways$nodes$attrs[1:10,]
V(graph)$id
names(vertex.attributes(graph))
V(graph)$name
names(data$ways$attrs)
data_ways$nodes$attrs
data_ways$nodes$attrs
names(data_ways$nodes$attrs)
x = data_ways$nodes$attrs$lat
y = x = data_ways$nodes$attrs$lon
y =  data_ways$nodes$attrs$lon
x = data_ways$nodes$attrs$lat
y =  data_ways$nodes$attrs$lon
x = data_ways$nodes$attrs$lat
y = data_ways$nodes$attrs$lon
V(graph)$name
V(graph)$x=x
length(x)
length(V(graph))
length(V(graph)$name)
V(graph)$name==names(data_ways$nodes$attrs)
names(data_ways$nodes$attrs)
data_ways$nodes$attrs$id
data_ways$nodes$attrs$id==V(graph)$name
help(graph.empty)
data_ways$nodes
data_ways$nodes$attrs
head(data_ways$nodes$attrs)
head(data_ways$ways$attrs)
head(data_ways$ways)
head(data_ways$ways,n=1)
data_ways$ways[[1]]
names(data_ways$ways)
names(data_ways$ways$refs)
names(data_ways$ways$tags)
names(data_ways$ways)
names(data_ways$ways$attrs)
names(data_ways)
names(data_ways$relations)
names(data_ways$relations$attrs)
names(data_ways$relations$tags)
names(data_ways$relations$refs)
data_ways$relations$refs$type
data_ways$relations$refs$ref
summary(data_ways)
help(as_igraph)
osmar$ways$attrs$uid
data_ways$ways$attrs$uid
data_ways$ways$refs$uid
data_ways$ways$refs
names(data_ways$ways$refs)
graph = graph.edgelist(data_ways$ways$refs)
is.data.frame(data_ways$ways$refs)
is.matrix(data_ways$ways$refs)
graph = graph.edgelist(as.matrix(data_ways$ways$refs))
dim(as.matrix(data_ways$ways$refs))
help(graph.edgelist()
)
help(graph.edgelist)
dim(as.numeric(as.matrix(data_ways$ways$refs)))
as.numeric(as.matrix(data_ways$ways$refs))
length(as.numeric(as.matrix(data_ways$ways$refs)))
graph.edgelist(matrix(data=c(1,0,0,1),nrow=2))
graph.edgelist(matrix(data=c(2,1,1,2),nrow=2))
summary(as.matrix(data_ways$ways$refs))
graph = graph.edgelist(as.matrix(data_ways$ways$refs))
summary(data_ways)
library(rgexf)
help(rgexf)
help(read.gexf)
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23/35/42-CET-2015.gexf'))
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015.gexf'))
graph = gexf.to.igraph(graph_gexf)
graph_gexf
summary(graph_gexf)
check.dpl.edges(graph_gexf)
graph_gexf <- read.gexf(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015.gexf'))
graph = gexf.to.igraph(graph_gexf)
measures <- read.csv(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015_Nodes.csv'))
measures <- read.csv(
paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/processed/networks/test_citingNW_Wed-Oct-28-23:35:42-CET-2015_Nodes.csv'),
sep=';'
)
summary(measures)
measures$is_cyber
is.na(measures$cybergeo)
colNames(measures)
colnames(measures)
mean(measures$Degré.Entrant)
mean(measures$Degré.Entrant[!is.na(measures$cybergeo)])
summary(measures$Degré.Entrant[!is.na(measures$cybergeo)])
length(measures$Degré.Entrant[!is.na(measures$cybergeo)])
hist(measures$Degré.Entrant[!is.na(measures$cybergeo)])
hist(measures$Degré.Entrant[!is.na(measures$cybergeo)],breaks=100)
indeg = measures$Degré.Entrant[!is.na(measures$cybergeo)]
hist(indeg,breaks=100)
which(indeg==max(indeg))
measures[908,]
max(indeg)
cyb = measures[!is.na(measures$cybergeo),]
dim(cyb)
cyb[which(indeg==max(indeg)),]
mean(cyb$Degré.Entrant)
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.9)])
quantile(cyb$Degré.Entrant,0.9)
quantile(cyb$Degré.Entrant,0.95)
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.95)])
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.99)])
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.90)])
quantiles = (1:100)/100
quantiles
impactFactor=mean(cyb$Degré.Entrant)
help(lapply)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,0.10)])
quantile(cyb$Degré.Entrant,0.10)
quantiles = (60:100)/100
impactFactor=mean(cyb$Degré.Entrant)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
quantile(cyb$Degré.Entrant,1)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<=quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
quantiles = (50:100)/100
impactFactor=mean(cyb$Degré.Entrant)
contrQuantile = sapply(quantiles,function(q){mean(cyb$Degré.Entrant[cyb$Degré.Entrant<=quantile(cyb$Degré.Entrant,q)])/impactFactor})
contrQuantile
plot(quantiles,contrQuantile,type="l")
x=rnorm(100)
x
y=rnorm(100)
plot(x,y,axis=FALSE)
plot(x,y,axes=FALSE)
axis(1,pos=0,5)
axis(1,pos=0)
axis(0,pos=0)
axis(2,pos=0)
df
data
d
d <- function(w){
years = c(1,8,17)
dispo = c(27,5 + w * 10,3+w)
return(data.frame(x=years,y=dispo,xl=log(years),yl=log(dispo)))
}
d(0.5)
weights = (1:100)/100
weights
lm(x~y,d(0.5))
slotnames(lm(x~y,d(0.5)))
slotNames(lm(x~y,d(0.5)))
names(lm(x~y,d(0.5)))
names(summary(lm(x~y,d(0.5)))
)
help(append)
weights = (1:100)/100
rlin = c()
rloglin = c()
for(w in weights){
rlin = append(rlin,summary(lm(y~x,d(w)))$adj.r.squared)
rloglin = append(rloglin,summary(lm(yl~xl,d(w)))$adj.r.squared)
}
rlin
rloglin
plot(weights,rlin)
plot(weights,rloglin)
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
overlap <- read.table('Models//Techno//TechnoClasses//res//overlap.csv',sep=";")
links = 0
for(i in 1:nrow(overlap)){
show(i)
links = links + (overlap[i,i]^2)
if(i<nrow(overlap)){
for(j in (i+1):ncol(overlap)){
overlap[j,j] = overlap[j,j] - overlap[i,j]
}
}
}
setwd(paste0(Sys.getenv('CS_HOME'),'/PatentsMining'))
Sys.getenv('CS_HOME')
pr <- prcomp(cormat[1,8:17])
setwd(paste0(Sys.getenv('CN_HOME'),'/Results/Synthetic/Network'))
setwd(paste0(Sys.getenv('CN_HOME'),'/Results/Synthetic/Network'))
getwd()
install.packages('cartography')
install.packages('cartography',source=T)
help(install.packages)
install.packages('cartography',type='source')
library(cartography)
help(cartography)
citation(package="cartography")
resdir='20160106_LHSDensityNW/data/'
cartography: vignette(topic = "cartography")
cartography:vignette(topic = "cartography")
vignette(topic = "cartography")
data("nuts2006")
EuropeStamen <- getTiles(spdf = nuts0.spdf, type = "stamen-watercolor")
install.packages('OpenStreetMap')
EuropeStamen <- getTiles(spdf = nuts0.spdf, type = "stamen-watercolor")
tilesLayer(EuropeStamen)
plot(nuts0.spdf, add=TRUE)
mtext(text = "Map tiles by Stamen Design, under CC BY 3.0. Data by OpenStreetMap, under CC BY SA.",
side = 1, adj = 0, cex = 0.7, font = 3)
install.packages('shiny')
shiny::runApp('~/Documents/ComplexSystems/Misc/Anna/063-superzip-example')
library(maps)
library(mapdata)
library(rworldmap)
load("~/Documents/ComplexSystems/CyberGeo/cybergeo20/Data/statsvisu/statsvisu.RData")
View(dicoId)
View(statsCyber)
statsCyber[2000:2020,]
length(statsCyber$UNIQID)
length(unique(statsCyber$UNIQID))
statsCyber[statsCyber$UNIQID==T0468,]
statsCyber[statsCyber$UNIQID=="T0468",]
View(dicoId)
head(dicoId)
setwd('/Users//Juste/Documents/ComplexSystems//CyberGeo//cybergeo20//Data//raw')
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=FALSE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep=' ',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
help(scan)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE,na.strings="NA")
getwd()
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE,na.strings="NA")
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\")
""
""
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\"")
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\"")
head(raw)
library(dplyr)
help(inner_join)
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data/raw'))
setwd(paste0(Sys.getenv('CS_HOME'),'/Cybergeo/cybergeo20/Data'))
load('statsvisu//statsvisu.RData')
library(dplyr)
as.tbl(raw)
as.tbl(statsCyber)
as.tbl(statsCyber) %>% group_by(UNIQID)
statsCyber$Annee
unique(statsCyber$Annee)
colnames(statsCyber)
as.tbl(statsCyber) %>% group_by(UNIQID) %>% summarise (
Titre=Titre[1]
)
as.tbl(statsCyber) %>% group_by(UNIQID) %>% summarise (
Titre=Titre[1],DatePublication=DatePublication[1],Rubrique=Rubrique[1],Auteur=Auteur[1],TypeDocument=TypeDocument[1],Disponibilite=Disponibilite[1],
VisuTot = sum(NombreVisualisations),
Visu07 = NombreVisualisations[Annee==2007],Visu08 = NombreVisualisations[Annee==2008],Visu09 = NombreVisualisations[Annee==2009],Visu10 = NombreVisualisations[Annee==2010],
Visu11 = NombreVisualisations[Annee==2011],Visu12 = NombreVisualisations[Annee==2012],Visu13 = NombreVisualisations[Annee==2013],Visu14 = NombreVisualisations[Annee==2014]
)
as.tbl(statsCyber) %>% group_by(UNIQID) %>% summarise (
Titre=Titre[1],DatePublication=DatePublication[1],Rubrique=Rubrique[1],Auteur=Auteur[1],TypeDocument=TypeDocument[1],Disponibilite=Disponibilite[1],
VisuTot = sum(NombreVisualisations),
Visu07 = sum(NombreVisualisations[Annee==2007])#,Visu08 = sum(NombreVisualisations[Annee==2008]),Visu09 = NombreVisualisations[Annee==2009],Visu10 = NombreVisualisations[Annee==2010],
#Visu11 = NombreVisualisations[Annee==2011],Visu12 = NombreVisualisations[Annee==2012],Visu13 = NombreVisualisations[Annee==2013],Visu14 = NombreVisualisations[Annee==2014]
)
a<-as.tbl(statsCyber) %>% group_by(UNIQID) %>% summarise (
Titre=Titre[1],DatePublication=DatePublication[1],Rubrique=Rubrique[1],Auteur=Auteur[1],TypeDocument=TypeDocument[1],Disponibilite=Disponibilite[1],
VisuTot = sum(NombreVisualisations),
Visu07 = sum(NombreVisualisations[Annee==2007])#,Visu08 = sum(NombreVisualisations[Annee==2008]),Visu09 = NombreVisualisations[Annee==2009],Visu10 = NombreVisualisations[Annee==2010],
#Visu11 = NombreVisualisations[Annee==2011],Visu12 = NombreVisualisations[Annee==2012],Visu13 = NombreVisualisations[Annee==2013],Visu14 = NombreVisualisations[Annee==2014]
)
a$Visu07
prov<-as.tbl(statsCyber) %>% group_by(UNIQID) %>% summarise (
Titre=Titre[1],DatePublication=DatePublication[1],Rubrique=Rubrique[1],Auteur=Auteur[1],TypeDocument=TypeDocument[1],Disponibilite=Disponibilite[1],
VisuTot = sum(NombreVisualisations),
Visu07 = sum(NombreVisualisations[Annee==2007]),Visu08 = sum(NombreVisualisations[Annee==2008]),Visu09 = sum(NombreVisualisations[Annee==2009]),Visu10 = sum(NombreVisualisations[Annee==2010]),
Visu11 = sum(NombreVisualisations[Annee==2011]),Visu12 = sum(NombreVisualisations[Annee==2012]),Visu13 = sum(NombreVisualisations[Annee==2013]),Visu14 = sum(NombreVisualisations[Annee==2014])
)
prov
as.tbl(raw)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\"",stringAsFactors=FALSE)
raw <- read.table('cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\"",stringsAsFactors=FALSE)
raw <- read.table('raw/cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\"",stringsAsFactors=FALSE)
as.tbl(raw)
raw <- read.table('raw/cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\"",stringsAsFactors=FALSE)
as.tbl(raw)
prov
prov<-as.tbl(statsCyber) %>% group_by(UNIQID) %>% summarise (
Title=Titre[1],DatePublication=DatePublication[1],Rubrique=Rubrique[1],Auteur=Auteur[1],TypeDocument=TypeDocument[1],Disponibilite=Disponibilite[1],
VisuTot = sum(NombreVisualisations),
Visu07 = sum(NombreVisualisations[Annee==2007]),Visu08 = sum(NombreVisualisations[Annee==2008]),Visu09 = sum(NombreVisualisations[Annee==2009]),Visu10 = sum(NombreVisualisations[Annee==2010]),
Visu11 = sum(NombreVisualisations[Annee==2011]),Visu12 = sum(NombreVisualisations[Annee==2012]),Visu13 = sum(NombreVisualisations[Annee==2013]),Visu14 = sum(NombreVisualisations[Annee==2014])
)
inner_join(as.tbl(raw),prov,by='Title')
as.tbl(raw)
left_join(as.tbl(raw),prov,by='Title')
joined = left_join(as.tbl(raw),prov,by='Title')
which(is.na(joined$VisuTot))
head(joined)
joined[2,]
data.frame(joined[2,])
help(sort)
which(statsCyber$Auteur=="Saint-Julien Thérèse")
data.frame(joined[118,])
which(statsCyber$Auteur=="Pouyllau Michel,Puythorac F.,Vergnes A.,Lagrée S.,Tu Dan Nguyen,Xuan Thu Ha Thi,Anh Tuan Luong,Amelot Xavier,Pouille Fabien")
which(statsCyber$Title=="The remote sensing dimension in a cooperative research program on mountainside: cases in Ecuador, Rwanda and Viet-Nam")
View(dicoId)
raw <- read.table('raw/cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\"",stringsAsFactors=FALSE)
as.tbl(raw)
prov<-as.tbl(statsCyber) %>% group_by(UNIQID) %>% summarise (
Title=Titre[1],DatePublication=DatePublication[1],Rubrique=Rubrique[1],Auteur=Auteur[1],TypeDocument=TypeDocument[1],Disponibilite=Disponibilite[1],
VisuTot = sum(NombreVisualisations),
Visu07 = sum(NombreVisualisations[Annee==2007]),Visu08 = sum(NombreVisualisations[Annee==2008]),Visu09 = sum(NombreVisualisations[Annee==2009]),Visu10 = sum(NombreVisualisations[Annee==2010]),
Visu11 = sum(NombreVisualisations[Annee==2011]),Visu12 = sum(NombreVisualisations[Annee==2012]),Visu13 = sum(NombreVisualisations[Annee==2013]),Visu14 = sum(NombreVisualisations[Annee==2014])
)
joined = left_join(as.tbl(raw),prov,by='Title')
joined
length(which(is.na(joined$VisuTot)))
which(is.na(joined$VisuTot))
as.data.frame(joined[10,])
which(statsCyber$Auteur=="Palsky Gilles")
write.csv(statsCyber,'prov.csv')
as.tbl(raw)
length(unique(raw$date))
length(unique(statsCyber$DatePublication))
raw <- read.table('raw/cybergeo_withFR.csv',sep='\t',header=TRUE,quote="\"",stringsAsFactors=FALSE)
library(dplyr)
prov<-as.tbl(statsCyber) %>% group_by(UNIQID) %>% summarise (
Title=Titre[1],DatePublication=DatePublication[1],Rubrique=Rubrique[1],Auteur=Auteur[1],TypeDocument=TypeDocument[1],Disponibilite=Disponibilite[1],
VisuTot = sum(NombreVisualisations),
Visu07 = sum(NombreVisualisations[Annee==2007]),Visu08 = sum(NombreVisualisations[Annee==2008]),Visu09 = sum(NombreVisualisations[Annee==2009]),Visu10 = sum(NombreVisualisations[Annee==2010]),
Visu11 = sum(NombreVisualisations[Annee==2011]),Visu12 = sum(NombreVisualisations[Annee==2012]),Visu13 = sum(NombreVisualisations[Annee==2013]),Visu14 = sum(NombreVisualisations[Annee==2014])
)
joined = left_join(as.tbl(raw),prov,by='Title')
which(is.na(joined$VisuTot))
data.frame(raw[118,])
dim(raw)
dim(statsCyber)
dim(prov)
write.csv(prov,'raw/prov.csv')
raw$Title
unique(raw$Title)
length(unique(raw$Title))
length(unique(raw$Title_en))
raw$Title_en[1220:1222]
raw$Title
raw$Title_en[1231:1233]
write.table(data.frame(statsCyber$UNIQID,statsCyber$Titre),'raw/prov_ids.csv',sep='\t',quote="")
write.table(data.frame(statsCyber$UNIQID,statsCyber$Titre),'raw/prov_ids.csv',sep='\t')
write.table(data.frame(statsCyber$UNIQID,statsCyber$Titre),'raw/prov_ids.csv',sep='\t',col.names = FALSE,row.names = FALSE,quote = FALSE)
dim(joined)
joined = inner_join(as.tbl(raw),prov,by='Title')
dim(joined)
sqlmerged <- read.table('raw/merged.csv',sep='\t',header=TRUE,quote="\"",stringsAsFactors=FALSE)
dim sqlmerged
dim(sqlmerged)
colnames(sqlmerged)
colnames(prov)
colnames(sqlmerged)[2]="UNIQID"
colnames(sqlmerged)
joined = left_join(as.tbl(sqlmerged),prov,by='UNIQID')
dim joinded
dim(joined)
cit <- read.table('raw/cit.csv',sep='\t',header=TRUE,quote="\"",stringsAsFactors=FALSE)
colnames(cit)=c("SCHID",'numciting','numcited')
as.tbl(cit)
final = left_join(joined,as.tbl(cit),by="")
final = left_join(joined,as.tbl(cit),by="SCHID")
write.csv(final,'raw/cybergeo_final.csv')
write.csv(final,'raw/cybergeo_final.csv',row.names=FALSE)
res=final[,c(1,3:11,15:30)]
res
dim(res)
colnames(res)[2:3]=c("schid","title")
colnames(res)[25,26]=c("numciting","numcited")
colnames(res)[25:26]=c("numciting","numcited")
write.csv(res,'raw/cybergeo_final.csv',row.names=FALSE)
colnames(res)[2:4]=c("schid","title","title_en")
colnames(res)[25:26]=c("numciting","numcited")
write.csv(res,'raw/cybergeo_final.csv',row.names=FALSE)
colnames(res)[25:26]=c("citedby","citing")
write.csv(res,'raw/cybergeo_final.csv',row.names=FALSE)
